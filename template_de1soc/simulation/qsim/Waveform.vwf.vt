// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2020 11:53:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    simple_ipod_solution
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module simple_ipod_solution_vlg_sample_tst(
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACLRCK,
	CLOCK_50,
	DRAM_DQ,
	FPGA_I2C_SDAT,
	GPIO_0,
	GPIO_1,
	KEY,
	PS2_CLK,
	PS2_DAT,
	SW,
	sampler_tx
);
input  AUD_ADCDAT;
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACLRCK;
input  CLOCK_50;
input [15:0] DRAM_DQ;
input  FPGA_I2C_SDAT;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [3:0] KEY;
input  PS2_CLK;
input  PS2_DAT;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(AUD_ADCDAT or AUD_ADCLRCK or AUD_BCLK or AUD_DACLRCK or CLOCK_50 or DRAM_DQ or FPGA_I2C_SDAT or GPIO_0 or GPIO_1 or KEY or PS2_CLK or PS2_DAT or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module simple_ipod_solution_vlg_check_tst (
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_LDQM,
	DRAM_RAS_N,
	DRAM_UDQM,
	DRAM_WE_N,
	FPGA_I2C_SCLK,
	FPGA_I2C_SDAT,
	GPIO_0,
	GPIO_1,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	LEDR,
	PS2_CLK,
	PS2_DAT,
	sampler_rx
);
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACDAT;
input  AUD_DACLRCK;
input  AUD_XCK;
input [12:0] DRAM_ADDR;
input [1:0] DRAM_BA;
input  DRAM_CAS_N;
input  DRAM_CKE;
input  DRAM_CLK;
input  DRAM_CS_N;
input [15:0] DRAM_DQ;
input  DRAM_LDQM;
input  DRAM_RAS_N;
input  DRAM_UDQM;
input  DRAM_WE_N;
input  FPGA_I2C_SCLK;
input  FPGA_I2C_SDAT;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [9:0] LEDR;
input  PS2_CLK;
input  PS2_DAT;
input sampler_rx;

reg  AUD_ADCLRCK_expected;
reg  AUD_BCLK_expected;
reg  AUD_DACDAT_expected;
reg  AUD_DACLRCK_expected;
reg  AUD_XCK_expected;
reg [12:0] DRAM_ADDR_expected;
reg [1:0] DRAM_BA_expected;
reg  DRAM_CAS_N_expected;
reg  DRAM_CKE_expected;
reg  DRAM_CLK_expected;
reg  DRAM_CS_N_expected;
reg [15:0] DRAM_DQ_expected;
reg  DRAM_LDQM_expected;
reg  DRAM_RAS_N_expected;
reg  DRAM_UDQM_expected;
reg  DRAM_WE_N_expected;
reg  FPGA_I2C_SCLK_expected;
reg  FPGA_I2C_SDAT_expected;
reg [35:0] GPIO_0_expected;
reg [35:0] GPIO_1_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [9:0] LEDR_expected;
reg  PS2_CLK_expected;
reg  PS2_DAT_expected;

reg  AUD_ADCLRCK_prev;
reg  AUD_BCLK_prev;
reg  AUD_DACDAT_prev;
reg  AUD_DACLRCK_prev;
reg  AUD_XCK_prev;
reg [12:0] DRAM_ADDR_prev;
reg [1:0] DRAM_BA_prev;
reg  DRAM_CAS_N_prev;
reg  DRAM_CKE_prev;
reg  DRAM_CLK_prev;
reg  DRAM_CS_N_prev;
reg [15:0] DRAM_DQ_prev;
reg  DRAM_LDQM_prev;
reg  DRAM_RAS_N_prev;
reg  DRAM_UDQM_prev;
reg  DRAM_WE_N_prev;
reg  FPGA_I2C_SCLK_prev;
reg  FPGA_I2C_SDAT_prev;
reg [35:0] GPIO_0_prev;
reg [35:0] GPIO_1_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [9:0] LEDR_prev;
reg  PS2_CLK_prev;
reg  PS2_DAT_prev;

reg  AUD_ADCLRCK_expected_prev;
reg  AUD_BCLK_expected_prev;
reg  AUD_DACDAT_expected_prev;
reg  AUD_DACLRCK_expected_prev;
reg  AUD_XCK_expected_prev;
reg [12:0] DRAM_ADDR_expected_prev;
reg [1:0] DRAM_BA_expected_prev;
reg  DRAM_CAS_N_expected_prev;
reg  DRAM_CKE_expected_prev;
reg  DRAM_CLK_expected_prev;
reg  DRAM_CS_N_expected_prev;
reg [15:0] DRAM_DQ_expected_prev;
reg  DRAM_LDQM_expected_prev;
reg  DRAM_RAS_N_expected_prev;
reg  DRAM_UDQM_expected_prev;
reg  DRAM_WE_N_expected_prev;
reg  FPGA_I2C_SCLK_expected_prev;
reg  FPGA_I2C_SDAT_expected_prev;
reg [35:0] GPIO_0_expected_prev;
reg [35:0] GPIO_1_expected_prev;
reg [6:0] HEX0_expected_prev;
reg [6:0] HEX1_expected_prev;
reg [6:0] HEX2_expected_prev;
reg [6:0] HEX3_expected_prev;
reg [6:0] HEX4_expected_prev;
reg [6:0] HEX5_expected_prev;
reg [9:0] LEDR_expected_prev;
reg  PS2_CLK_expected_prev;
reg  PS2_DAT_expected_prev;

reg  last_AUD_ADCLRCK_exp;
reg  last_AUD_BCLK_exp;
reg  last_AUD_DACDAT_exp;
reg  last_AUD_DACLRCK_exp;
reg  last_AUD_XCK_exp;
reg [12:0] last_DRAM_ADDR_exp;
reg [1:0] last_DRAM_BA_exp;
reg  last_DRAM_CAS_N_exp;
reg  last_DRAM_CKE_exp;
reg  last_DRAM_CLK_exp;
reg  last_DRAM_CS_N_exp;
reg [15:0] last_DRAM_DQ_exp;
reg  last_DRAM_LDQM_exp;
reg  last_DRAM_RAS_N_exp;
reg  last_DRAM_UDQM_exp;
reg  last_DRAM_WE_N_exp;
reg  last_FPGA_I2C_SCLK_exp;
reg  last_FPGA_I2C_SDAT_exp;
reg [35:0] last_GPIO_0_exp;
reg [35:0] last_GPIO_1_exp;
reg [6:0] last_HEX0_exp;
reg [6:0] last_HEX1_exp;
reg [6:0] last_HEX2_exp;
reg [6:0] last_HEX3_exp;
reg [6:0] last_HEX4_exp;
reg [6:0] last_HEX5_exp;
reg [9:0] last_LEDR_exp;
reg  last_PS2_CLK_exp;
reg  last_PS2_DAT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:29] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 29'b1;
end

// update real /o prevs

always @(trigger)
begin
	AUD_ADCLRCK_prev = AUD_ADCLRCK;
	AUD_BCLK_prev = AUD_BCLK;
	AUD_DACDAT_prev = AUD_DACDAT;
	AUD_DACLRCK_prev = AUD_DACLRCK;
	AUD_XCK_prev = AUD_XCK;
	DRAM_ADDR_prev = DRAM_ADDR;
	DRAM_BA_prev = DRAM_BA;
	DRAM_CAS_N_prev = DRAM_CAS_N;
	DRAM_CKE_prev = DRAM_CKE;
	DRAM_CLK_prev = DRAM_CLK;
	DRAM_CS_N_prev = DRAM_CS_N;
	DRAM_DQ_prev = DRAM_DQ;
	DRAM_LDQM_prev = DRAM_LDQM;
	DRAM_RAS_N_prev = DRAM_RAS_N;
	DRAM_UDQM_prev = DRAM_UDQM;
	DRAM_WE_N_prev = DRAM_WE_N;
	FPGA_I2C_SCLK_prev = FPGA_I2C_SCLK;
	FPGA_I2C_SDAT_prev = FPGA_I2C_SDAT;
	GPIO_0_prev = GPIO_0;
	GPIO_1_prev = GPIO_1;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	LEDR_prev = LEDR;
	PS2_CLK_prev = PS2_CLK;
	PS2_DAT_prev = PS2_DAT;
end

// update expected /o prevs

always @(trigger)
begin
	AUD_ADCLRCK_expected_prev = AUD_ADCLRCK_expected;
	AUD_BCLK_expected_prev = AUD_BCLK_expected;
	AUD_DACDAT_expected_prev = AUD_DACDAT_expected;
	AUD_DACLRCK_expected_prev = AUD_DACLRCK_expected;
	AUD_XCK_expected_prev = AUD_XCK_expected;
	DRAM_ADDR_expected_prev = DRAM_ADDR_expected;
	DRAM_BA_expected_prev = DRAM_BA_expected;
	DRAM_CAS_N_expected_prev = DRAM_CAS_N_expected;
	DRAM_CKE_expected_prev = DRAM_CKE_expected;
	DRAM_CLK_expected_prev = DRAM_CLK_expected;
	DRAM_CS_N_expected_prev = DRAM_CS_N_expected;
	DRAM_DQ_expected_prev = DRAM_DQ_expected;
	DRAM_LDQM_expected_prev = DRAM_LDQM_expected;
	DRAM_RAS_N_expected_prev = DRAM_RAS_N_expected;
	DRAM_UDQM_expected_prev = DRAM_UDQM_expected;
	DRAM_WE_N_expected_prev = DRAM_WE_N_expected;
	FPGA_I2C_SCLK_expected_prev = FPGA_I2C_SCLK_expected;
	FPGA_I2C_SDAT_expected_prev = FPGA_I2C_SDAT_expected;
	GPIO_0_expected_prev = GPIO_0_expected;
	GPIO_1_expected_prev = GPIO_1_expected;
	HEX0_expected_prev = HEX0_expected;
	HEX1_expected_prev = HEX1_expected;
	HEX2_expected_prev = HEX2_expected;
	HEX3_expected_prev = HEX3_expected;
	HEX4_expected_prev = HEX4_expected;
	HEX5_expected_prev = HEX5_expected;
	LEDR_expected_prev = LEDR_expected;
	PS2_CLK_expected_prev = PS2_CLK_expected;
	PS2_DAT_expected_prev = PS2_DAT_expected;
end



// expected AUD_DACDAT
initial
begin
	AUD_DACDAT_expected = 1'bX;
end 

// expected AUD_XCK
initial
begin
	AUD_XCK_expected = 1'bX;
end 
// expected DRAM_ADDR[ 12 ]
initial
begin
	DRAM_ADDR_expected[12] = 1'bX;
end 
// expected DRAM_ADDR[ 11 ]
initial
begin
	DRAM_ADDR_expected[11] = 1'bX;
end 
// expected DRAM_ADDR[ 10 ]
initial
begin
	DRAM_ADDR_expected[10] = 1'bX;
end 
// expected DRAM_ADDR[ 9 ]
initial
begin
	DRAM_ADDR_expected[9] = 1'bX;
end 
// expected DRAM_ADDR[ 8 ]
initial
begin
	DRAM_ADDR_expected[8] = 1'bX;
end 
// expected DRAM_ADDR[ 7 ]
initial
begin
	DRAM_ADDR_expected[7] = 1'bX;
end 
// expected DRAM_ADDR[ 6 ]
initial
begin
	DRAM_ADDR_expected[6] = 1'bX;
end 
// expected DRAM_ADDR[ 5 ]
initial
begin
	DRAM_ADDR_expected[5] = 1'bX;
end 
// expected DRAM_ADDR[ 4 ]
initial
begin
	DRAM_ADDR_expected[4] = 1'bX;
end 
// expected DRAM_ADDR[ 3 ]
initial
begin
	DRAM_ADDR_expected[3] = 1'bX;
end 
// expected DRAM_ADDR[ 2 ]
initial
begin
	DRAM_ADDR_expected[2] = 1'bX;
end 
// expected DRAM_ADDR[ 1 ]
initial
begin
	DRAM_ADDR_expected[1] = 1'bX;
end 
// expected DRAM_ADDR[ 0 ]
initial
begin
	DRAM_ADDR_expected[0] = 1'bX;
end 
// expected DRAM_BA[ 1 ]
initial
begin
	DRAM_BA_expected[1] = 1'bX;
end 
// expected DRAM_BA[ 0 ]
initial
begin
	DRAM_BA_expected[0] = 1'bX;
end 

// expected DRAM_CAS_N
initial
begin
	DRAM_CAS_N_expected = 1'bX;
end 

// expected DRAM_CKE
initial
begin
	DRAM_CKE_expected = 1'bX;
end 

// expected DRAM_CLK
initial
begin
	DRAM_CLK_expected = 1'bX;
end 

// expected DRAM_CS_N
initial
begin
	DRAM_CS_N_expected = 1'bX;
end 

// expected DRAM_LDQM
initial
begin
	DRAM_LDQM_expected = 1'bX;
end 

// expected DRAM_RAS_N
initial
begin
	DRAM_RAS_N_expected = 1'bX;
end 

// expected DRAM_UDQM
initial
begin
	DRAM_UDQM_expected = 1'bX;
end 

// expected DRAM_WE_N
initial
begin
	DRAM_WE_N_expected = 1'bX;
end 

// expected FPGA_I2C_SCLK
initial
begin
	FPGA_I2C_SCLK_expected = 1'bX;
end 
// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
end 
// expected HEX1[ 6 ]
initial
begin
	HEX1_expected[6] = 1'bX;
end 
// expected HEX1[ 5 ]
initial
begin
	HEX1_expected[5] = 1'bX;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
end 
// expected HEX2[ 6 ]
initial
begin
	HEX2_expected[6] = 1'bX;
end 
// expected HEX2[ 5 ]
initial
begin
	HEX2_expected[5] = 1'bX;
end 
// expected HEX2[ 4 ]
initial
begin
	HEX2_expected[4] = 1'bX;
end 
// expected HEX2[ 3 ]
initial
begin
	HEX2_expected[3] = 1'bX;
end 
// expected HEX2[ 2 ]
initial
begin
	HEX2_expected[2] = 1'bX;
end 
// expected HEX2[ 1 ]
initial
begin
	HEX2_expected[1] = 1'bX;
end 
// expected HEX2[ 0 ]
initial
begin
	HEX2_expected[0] = 1'bX;
end 
// expected HEX3[ 6 ]
initial
begin
	HEX3_expected[6] = 1'bX;
end 
// expected HEX3[ 5 ]
initial
begin
	HEX3_expected[5] = 1'bX;
end 
// expected HEX3[ 4 ]
initial
begin
	HEX3_expected[4] = 1'bX;
end 
// expected HEX3[ 3 ]
initial
begin
	HEX3_expected[3] = 1'bX;
end 
// expected HEX3[ 2 ]
initial
begin
	HEX3_expected[2] = 1'bX;
end 
// expected HEX3[ 1 ]
initial
begin
	HEX3_expected[1] = 1'bX;
end 
// expected HEX3[ 0 ]
initial
begin
	HEX3_expected[0] = 1'bX;
end 
// expected HEX4[ 6 ]
initial
begin
	HEX4_expected[6] = 1'bX;
end 
// expected HEX4[ 5 ]
initial
begin
	HEX4_expected[5] = 1'bX;
end 
// expected HEX4[ 4 ]
initial
begin
	HEX4_expected[4] = 1'bX;
end 
// expected HEX4[ 3 ]
initial
begin
	HEX4_expected[3] = 1'bX;
end 
// expected HEX4[ 2 ]
initial
begin
	HEX4_expected[2] = 1'bX;
end 
// expected HEX4[ 1 ]
initial
begin
	HEX4_expected[1] = 1'bX;
end 
// expected HEX4[ 0 ]
initial
begin
	HEX4_expected[0] = 1'bX;
end 
// expected HEX5[ 6 ]
initial
begin
	HEX5_expected[6] = 1'bX;
end 
// expected HEX5[ 5 ]
initial
begin
	HEX5_expected[5] = 1'bX;
end 
// expected HEX5[ 4 ]
initial
begin
	HEX5_expected[4] = 1'bX;
end 
// expected HEX5[ 3 ]
initial
begin
	HEX5_expected[3] = 1'bX;
end 
// expected HEX5[ 2 ]
initial
begin
	HEX5_expected[2] = 1'bX;
end 
// expected HEX5[ 1 ]
initial
begin
	HEX5_expected[1] = 1'bX;
end 
// expected HEX5[ 0 ]
initial
begin
	HEX5_expected[0] = 1'bX;
end 
// expected LEDR[ 9 ]
initial
begin
	LEDR_expected[9] = 1'bX;
end 
// expected LEDR[ 8 ]
initial
begin
	LEDR_expected[8] = 1'bX;
end 
// expected LEDR[ 7 ]
initial
begin
	LEDR_expected[7] = 1'bX;
end 
// expected LEDR[ 6 ]
initial
begin
	LEDR_expected[6] = 1'bX;
end 
// expected LEDR[ 5 ]
initial
begin
	LEDR_expected[5] = 1'bX;
end 
// expected LEDR[ 4 ]
initial
begin
	LEDR_expected[4] = 1'bX;
end 
// expected LEDR[ 3 ]
initial
begin
	LEDR_expected[3] = 1'bX;
end 
// expected LEDR[ 2 ]
initial
begin
	LEDR_expected[2] = 1'bX;
end 
// expected LEDR[ 1 ]
initial
begin
	LEDR_expected[1] = 1'bX;
end 
// expected LEDR[ 0 ]
initial
begin
	LEDR_expected[0] = 1'bX;
end 
// generate trigger
always @(AUD_ADCLRCK_expected or AUD_ADCLRCK or AUD_BCLK_expected or AUD_BCLK or AUD_DACDAT_expected or AUD_DACDAT or AUD_DACLRCK_expected or AUD_DACLRCK or AUD_XCK_expected or AUD_XCK or DRAM_ADDR_expected or DRAM_ADDR or DRAM_BA_expected or DRAM_BA or DRAM_CAS_N_expected or DRAM_CAS_N or DRAM_CKE_expected or DRAM_CKE or DRAM_CLK_expected or DRAM_CLK or DRAM_CS_N_expected or DRAM_CS_N or DRAM_DQ_expected or DRAM_DQ or DRAM_LDQM_expected or DRAM_LDQM or DRAM_RAS_N_expected or DRAM_RAS_N or DRAM_UDQM_expected or DRAM_UDQM or DRAM_WE_N_expected or DRAM_WE_N or FPGA_I2C_SCLK_expected or FPGA_I2C_SCLK or FPGA_I2C_SDAT_expected or FPGA_I2C_SDAT or GPIO_0_expected or GPIO_0 or GPIO_1_expected or GPIO_1 or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or LEDR_expected or LEDR or PS2_CLK_expected or PS2_CLK or PS2_DAT_expected or PS2_DAT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AUD_ADCLRCK = %b | expected AUD_BCLK = %b | expected AUD_DACDAT = %b | expected AUD_DACLRCK = %b | expected AUD_XCK = %b | expected DRAM_ADDR = %b | expected DRAM_BA = %b | expected DRAM_CAS_N = %b | expected DRAM_CKE = %b | expected DRAM_CLK = %b | expected DRAM_CS_N = %b | expected DRAM_DQ = %b | expected DRAM_LDQM = %b | expected DRAM_RAS_N = %b | expected DRAM_UDQM = %b | expected DRAM_WE_N = %b | expected FPGA_I2C_SCLK = %b | expected FPGA_I2C_SDAT = %b | expected GPIO_0 = %b | expected GPIO_1 = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected LEDR = %b | expected PS2_CLK = %b | expected PS2_DAT = %b | ",AUD_ADCLRCK_expected_prev,AUD_BCLK_expected_prev,AUD_DACDAT_expected_prev,AUD_DACLRCK_expected_prev,AUD_XCK_expected_prev,DRAM_ADDR_expected_prev,DRAM_BA_expected_prev,DRAM_CAS_N_expected_prev,DRAM_CKE_expected_prev,DRAM_CLK_expected_prev,DRAM_CS_N_expected_prev,DRAM_DQ_expected_prev,DRAM_LDQM_expected_prev,DRAM_RAS_N_expected_prev,DRAM_UDQM_expected_prev,DRAM_WE_N_expected_prev,FPGA_I2C_SCLK_expected_prev,FPGA_I2C_SDAT_expected_prev,GPIO_0_expected_prev,GPIO_1_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,LEDR_expected_prev,PS2_CLK_expected_prev,PS2_DAT_expected_prev);
	$display("| real AUD_ADCLRCK = %b | real AUD_BCLK = %b | real AUD_DACDAT = %b | real AUD_DACLRCK = %b | real AUD_XCK = %b | real DRAM_ADDR = %b | real DRAM_BA = %b | real DRAM_CAS_N = %b | real DRAM_CKE = %b | real DRAM_CLK = %b | real DRAM_CS_N = %b | real DRAM_DQ = %b | real DRAM_LDQM = %b | real DRAM_RAS_N = %b | real DRAM_UDQM = %b | real DRAM_WE_N = %b | real FPGA_I2C_SCLK = %b | real FPGA_I2C_SDAT = %b | real GPIO_0 = %b | real GPIO_1 = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real LEDR = %b | real PS2_CLK = %b | real PS2_DAT = %b | ",AUD_ADCLRCK_prev,AUD_BCLK_prev,AUD_DACDAT_prev,AUD_DACLRCK_prev,AUD_XCK_prev,DRAM_ADDR_prev,DRAM_BA_prev,DRAM_CAS_N_prev,DRAM_CKE_prev,DRAM_CLK_prev,DRAM_CS_N_prev,DRAM_DQ_prev,DRAM_LDQM_prev,DRAM_RAS_N_prev,DRAM_UDQM_prev,DRAM_WE_N_prev,FPGA_I2C_SCLK_prev,FPGA_I2C_SDAT_prev,GPIO_0_prev,GPIO_1_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,LEDR_prev,PS2_CLK_prev,PS2_DAT_prev);
`endif
	if (
		( AUD_ADCLRCK_expected_prev !== 1'bx ) && ( AUD_ADCLRCK_prev !== AUD_ADCLRCK_expected_prev )
		&& ((AUD_ADCLRCK_expected_prev !== last_AUD_ADCLRCK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_ADCLRCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_ADCLRCK_expected_prev);
		$display ("     Real value = %b", AUD_ADCLRCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AUD_ADCLRCK_exp = AUD_ADCLRCK_expected_prev;
	end
	if (
		( AUD_BCLK_expected_prev !== 1'bx ) && ( AUD_BCLK_prev !== AUD_BCLK_expected_prev )
		&& ((AUD_BCLK_expected_prev !== last_AUD_BCLK_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_BCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_BCLK_expected_prev);
		$display ("     Real value = %b", AUD_BCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AUD_BCLK_exp = AUD_BCLK_expected_prev;
	end
	if (
		( AUD_DACDAT_expected_prev !== 1'bx ) && ( AUD_DACDAT_prev !== AUD_DACDAT_expected_prev )
		&& ((AUD_DACDAT_expected_prev !== last_AUD_DACDAT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_DACDAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_DACDAT_expected_prev);
		$display ("     Real value = %b", AUD_DACDAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AUD_DACDAT_exp = AUD_DACDAT_expected_prev;
	end
	if (
		( AUD_DACLRCK_expected_prev !== 1'bx ) && ( AUD_DACLRCK_prev !== AUD_DACLRCK_expected_prev )
		&& ((AUD_DACLRCK_expected_prev !== last_AUD_DACLRCK_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_DACLRCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_DACLRCK_expected_prev);
		$display ("     Real value = %b", AUD_DACLRCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_AUD_DACLRCK_exp = AUD_DACLRCK_expected_prev;
	end
	if (
		( AUD_XCK_expected_prev !== 1'bx ) && ( AUD_XCK_prev !== AUD_XCK_expected_prev )
		&& ((AUD_XCK_expected_prev !== last_AUD_XCK_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_XCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_XCK_expected_prev);
		$display ("     Real value = %b", AUD_XCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_AUD_XCK_exp = AUD_XCK_expected_prev;
	end
	if (
		( DRAM_ADDR_expected_prev[0] !== 1'bx ) && ( DRAM_ADDR_prev[0] !== DRAM_ADDR_expected_prev[0] )
		&& ((DRAM_ADDR_expected_prev[0] !== last_DRAM_ADDR_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[0] = DRAM_ADDR_expected_prev[0];
	end
	if (
		( DRAM_ADDR_expected_prev[1] !== 1'bx ) && ( DRAM_ADDR_prev[1] !== DRAM_ADDR_expected_prev[1] )
		&& ((DRAM_ADDR_expected_prev[1] !== last_DRAM_ADDR_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[1] = DRAM_ADDR_expected_prev[1];
	end
	if (
		( DRAM_ADDR_expected_prev[2] !== 1'bx ) && ( DRAM_ADDR_prev[2] !== DRAM_ADDR_expected_prev[2] )
		&& ((DRAM_ADDR_expected_prev[2] !== last_DRAM_ADDR_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[2] = DRAM_ADDR_expected_prev[2];
	end
	if (
		( DRAM_ADDR_expected_prev[3] !== 1'bx ) && ( DRAM_ADDR_prev[3] !== DRAM_ADDR_expected_prev[3] )
		&& ((DRAM_ADDR_expected_prev[3] !== last_DRAM_ADDR_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[3] = DRAM_ADDR_expected_prev[3];
	end
	if (
		( DRAM_ADDR_expected_prev[4] !== 1'bx ) && ( DRAM_ADDR_prev[4] !== DRAM_ADDR_expected_prev[4] )
		&& ((DRAM_ADDR_expected_prev[4] !== last_DRAM_ADDR_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[4] = DRAM_ADDR_expected_prev[4];
	end
	if (
		( DRAM_ADDR_expected_prev[5] !== 1'bx ) && ( DRAM_ADDR_prev[5] !== DRAM_ADDR_expected_prev[5] )
		&& ((DRAM_ADDR_expected_prev[5] !== last_DRAM_ADDR_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[5] = DRAM_ADDR_expected_prev[5];
	end
	if (
		( DRAM_ADDR_expected_prev[6] !== 1'bx ) && ( DRAM_ADDR_prev[6] !== DRAM_ADDR_expected_prev[6] )
		&& ((DRAM_ADDR_expected_prev[6] !== last_DRAM_ADDR_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[6] = DRAM_ADDR_expected_prev[6];
	end
	if (
		( DRAM_ADDR_expected_prev[7] !== 1'bx ) && ( DRAM_ADDR_prev[7] !== DRAM_ADDR_expected_prev[7] )
		&& ((DRAM_ADDR_expected_prev[7] !== last_DRAM_ADDR_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[7] = DRAM_ADDR_expected_prev[7];
	end
	if (
		( DRAM_ADDR_expected_prev[8] !== 1'bx ) && ( DRAM_ADDR_prev[8] !== DRAM_ADDR_expected_prev[8] )
		&& ((DRAM_ADDR_expected_prev[8] !== last_DRAM_ADDR_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[8] = DRAM_ADDR_expected_prev[8];
	end
	if (
		( DRAM_ADDR_expected_prev[9] !== 1'bx ) && ( DRAM_ADDR_prev[9] !== DRAM_ADDR_expected_prev[9] )
		&& ((DRAM_ADDR_expected_prev[9] !== last_DRAM_ADDR_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[9] = DRAM_ADDR_expected_prev[9];
	end
	if (
		( DRAM_ADDR_expected_prev[10] !== 1'bx ) && ( DRAM_ADDR_prev[10] !== DRAM_ADDR_expected_prev[10] )
		&& ((DRAM_ADDR_expected_prev[10] !== last_DRAM_ADDR_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[10] = DRAM_ADDR_expected_prev[10];
	end
	if (
		( DRAM_ADDR_expected_prev[11] !== 1'bx ) && ( DRAM_ADDR_prev[11] !== DRAM_ADDR_expected_prev[11] )
		&& ((DRAM_ADDR_expected_prev[11] !== last_DRAM_ADDR_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[11] = DRAM_ADDR_expected_prev[11];
	end
	if (
		( DRAM_ADDR_expected_prev[12] !== 1'bx ) && ( DRAM_ADDR_prev[12] !== DRAM_ADDR_expected_prev[12] )
		&& ((DRAM_ADDR_expected_prev[12] !== last_DRAM_ADDR_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_ADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_ADDR_expected_prev);
		$display ("     Real value = %b", DRAM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DRAM_ADDR_exp[12] = DRAM_ADDR_expected_prev[12];
	end
	if (
		( DRAM_BA_expected_prev[0] !== 1'bx ) && ( DRAM_BA_prev[0] !== DRAM_BA_expected_prev[0] )
		&& ((DRAM_BA_expected_prev[0] !== last_DRAM_BA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_BA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_BA_expected_prev);
		$display ("     Real value = %b", DRAM_BA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DRAM_BA_exp[0] = DRAM_BA_expected_prev[0];
	end
	if (
		( DRAM_BA_expected_prev[1] !== 1'bx ) && ( DRAM_BA_prev[1] !== DRAM_BA_expected_prev[1] )
		&& ((DRAM_BA_expected_prev[1] !== last_DRAM_BA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_BA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_BA_expected_prev);
		$display ("     Real value = %b", DRAM_BA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DRAM_BA_exp[1] = DRAM_BA_expected_prev[1];
	end
	if (
		( DRAM_CAS_N_expected_prev !== 1'bx ) && ( DRAM_CAS_N_prev !== DRAM_CAS_N_expected_prev )
		&& ((DRAM_CAS_N_expected_prev !== last_DRAM_CAS_N_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CAS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CAS_N_expected_prev);
		$display ("     Real value = %b", DRAM_CAS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DRAM_CAS_N_exp = DRAM_CAS_N_expected_prev;
	end
	if (
		( DRAM_CKE_expected_prev !== 1'bx ) && ( DRAM_CKE_prev !== DRAM_CKE_expected_prev )
		&& ((DRAM_CKE_expected_prev !== last_DRAM_CKE_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CKE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CKE_expected_prev);
		$display ("     Real value = %b", DRAM_CKE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DRAM_CKE_exp = DRAM_CKE_expected_prev;
	end
	if (
		( DRAM_CLK_expected_prev !== 1'bx ) && ( DRAM_CLK_prev !== DRAM_CLK_expected_prev )
		&& ((DRAM_CLK_expected_prev !== last_DRAM_CLK_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CLK_expected_prev);
		$display ("     Real value = %b", DRAM_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_DRAM_CLK_exp = DRAM_CLK_expected_prev;
	end
	if (
		( DRAM_CS_N_expected_prev !== 1'bx ) && ( DRAM_CS_N_prev !== DRAM_CS_N_expected_prev )
		&& ((DRAM_CS_N_expected_prev !== last_DRAM_CS_N_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_CS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_CS_N_expected_prev);
		$display ("     Real value = %b", DRAM_CS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_DRAM_CS_N_exp = DRAM_CS_N_expected_prev;
	end
	if (
		( DRAM_DQ_expected_prev[0] !== 1'bx ) && ( DRAM_DQ_prev[0] !== DRAM_DQ_expected_prev[0] )
		&& ((DRAM_DQ_expected_prev[0] !== last_DRAM_DQ_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[0] = DRAM_DQ_expected_prev[0];
	end
	if (
		( DRAM_DQ_expected_prev[1] !== 1'bx ) && ( DRAM_DQ_prev[1] !== DRAM_DQ_expected_prev[1] )
		&& ((DRAM_DQ_expected_prev[1] !== last_DRAM_DQ_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[1] = DRAM_DQ_expected_prev[1];
	end
	if (
		( DRAM_DQ_expected_prev[2] !== 1'bx ) && ( DRAM_DQ_prev[2] !== DRAM_DQ_expected_prev[2] )
		&& ((DRAM_DQ_expected_prev[2] !== last_DRAM_DQ_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[2] = DRAM_DQ_expected_prev[2];
	end
	if (
		( DRAM_DQ_expected_prev[3] !== 1'bx ) && ( DRAM_DQ_prev[3] !== DRAM_DQ_expected_prev[3] )
		&& ((DRAM_DQ_expected_prev[3] !== last_DRAM_DQ_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[3] = DRAM_DQ_expected_prev[3];
	end
	if (
		( DRAM_DQ_expected_prev[4] !== 1'bx ) && ( DRAM_DQ_prev[4] !== DRAM_DQ_expected_prev[4] )
		&& ((DRAM_DQ_expected_prev[4] !== last_DRAM_DQ_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[4] = DRAM_DQ_expected_prev[4];
	end
	if (
		( DRAM_DQ_expected_prev[5] !== 1'bx ) && ( DRAM_DQ_prev[5] !== DRAM_DQ_expected_prev[5] )
		&& ((DRAM_DQ_expected_prev[5] !== last_DRAM_DQ_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[5] = DRAM_DQ_expected_prev[5];
	end
	if (
		( DRAM_DQ_expected_prev[6] !== 1'bx ) && ( DRAM_DQ_prev[6] !== DRAM_DQ_expected_prev[6] )
		&& ((DRAM_DQ_expected_prev[6] !== last_DRAM_DQ_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[6] = DRAM_DQ_expected_prev[6];
	end
	if (
		( DRAM_DQ_expected_prev[7] !== 1'bx ) && ( DRAM_DQ_prev[7] !== DRAM_DQ_expected_prev[7] )
		&& ((DRAM_DQ_expected_prev[7] !== last_DRAM_DQ_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[7] = DRAM_DQ_expected_prev[7];
	end
	if (
		( DRAM_DQ_expected_prev[8] !== 1'bx ) && ( DRAM_DQ_prev[8] !== DRAM_DQ_expected_prev[8] )
		&& ((DRAM_DQ_expected_prev[8] !== last_DRAM_DQ_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[8] = DRAM_DQ_expected_prev[8];
	end
	if (
		( DRAM_DQ_expected_prev[9] !== 1'bx ) && ( DRAM_DQ_prev[9] !== DRAM_DQ_expected_prev[9] )
		&& ((DRAM_DQ_expected_prev[9] !== last_DRAM_DQ_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[9] = DRAM_DQ_expected_prev[9];
	end
	if (
		( DRAM_DQ_expected_prev[10] !== 1'bx ) && ( DRAM_DQ_prev[10] !== DRAM_DQ_expected_prev[10] )
		&& ((DRAM_DQ_expected_prev[10] !== last_DRAM_DQ_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[10] = DRAM_DQ_expected_prev[10];
	end
	if (
		( DRAM_DQ_expected_prev[11] !== 1'bx ) && ( DRAM_DQ_prev[11] !== DRAM_DQ_expected_prev[11] )
		&& ((DRAM_DQ_expected_prev[11] !== last_DRAM_DQ_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[11] = DRAM_DQ_expected_prev[11];
	end
	if (
		( DRAM_DQ_expected_prev[12] !== 1'bx ) && ( DRAM_DQ_prev[12] !== DRAM_DQ_expected_prev[12] )
		&& ((DRAM_DQ_expected_prev[12] !== last_DRAM_DQ_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[12] = DRAM_DQ_expected_prev[12];
	end
	if (
		( DRAM_DQ_expected_prev[13] !== 1'bx ) && ( DRAM_DQ_prev[13] !== DRAM_DQ_expected_prev[13] )
		&& ((DRAM_DQ_expected_prev[13] !== last_DRAM_DQ_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[13] = DRAM_DQ_expected_prev[13];
	end
	if (
		( DRAM_DQ_expected_prev[14] !== 1'bx ) && ( DRAM_DQ_prev[14] !== DRAM_DQ_expected_prev[14] )
		&& ((DRAM_DQ_expected_prev[14] !== last_DRAM_DQ_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[14] = DRAM_DQ_expected_prev[14];
	end
	if (
		( DRAM_DQ_expected_prev[15] !== 1'bx ) && ( DRAM_DQ_prev[15] !== DRAM_DQ_expected_prev[15] )
		&& ((DRAM_DQ_expected_prev[15] !== last_DRAM_DQ_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_DQ[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_DQ_expected_prev);
		$display ("     Real value = %b", DRAM_DQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_DRAM_DQ_exp[15] = DRAM_DQ_expected_prev[15];
	end
	if (
		( DRAM_LDQM_expected_prev !== 1'bx ) && ( DRAM_LDQM_prev !== DRAM_LDQM_expected_prev )
		&& ((DRAM_LDQM_expected_prev !== last_DRAM_LDQM_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_LDQM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_LDQM_expected_prev);
		$display ("     Real value = %b", DRAM_LDQM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_DRAM_LDQM_exp = DRAM_LDQM_expected_prev;
	end
	if (
		( DRAM_RAS_N_expected_prev !== 1'bx ) && ( DRAM_RAS_N_prev !== DRAM_RAS_N_expected_prev )
		&& ((DRAM_RAS_N_expected_prev !== last_DRAM_RAS_N_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_RAS_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_RAS_N_expected_prev);
		$display ("     Real value = %b", DRAM_RAS_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_DRAM_RAS_N_exp = DRAM_RAS_N_expected_prev;
	end
	if (
		( DRAM_UDQM_expected_prev !== 1'bx ) && ( DRAM_UDQM_prev !== DRAM_UDQM_expected_prev )
		&& ((DRAM_UDQM_expected_prev !== last_DRAM_UDQM_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_UDQM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_UDQM_expected_prev);
		$display ("     Real value = %b", DRAM_UDQM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_DRAM_UDQM_exp = DRAM_UDQM_expected_prev;
	end
	if (
		( DRAM_WE_N_expected_prev !== 1'bx ) && ( DRAM_WE_N_prev !== DRAM_WE_N_expected_prev )
		&& ((DRAM_WE_N_expected_prev !== last_DRAM_WE_N_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DRAM_WE_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DRAM_WE_N_expected_prev);
		$display ("     Real value = %b", DRAM_WE_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_DRAM_WE_N_exp = DRAM_WE_N_expected_prev;
	end
	if (
		( FPGA_I2C_SCLK_expected_prev !== 1'bx ) && ( FPGA_I2C_SCLK_prev !== FPGA_I2C_SCLK_expected_prev )
		&& ((FPGA_I2C_SCLK_expected_prev !== last_FPGA_I2C_SCLK_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FPGA_I2C_SCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FPGA_I2C_SCLK_expected_prev);
		$display ("     Real value = %b", FPGA_I2C_SCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_FPGA_I2C_SCLK_exp = FPGA_I2C_SCLK_expected_prev;
	end
	if (
		( FPGA_I2C_SDAT_expected_prev !== 1'bx ) && ( FPGA_I2C_SDAT_prev !== FPGA_I2C_SDAT_expected_prev )
		&& ((FPGA_I2C_SDAT_expected_prev !== last_FPGA_I2C_SDAT_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FPGA_I2C_SDAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FPGA_I2C_SDAT_expected_prev);
		$display ("     Real value = %b", FPGA_I2C_SDAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_FPGA_I2C_SDAT_exp = FPGA_I2C_SDAT_expected_prev;
	end
	if (
		( GPIO_0_expected_prev[0] !== 1'bx ) && ( GPIO_0_prev[0] !== GPIO_0_expected_prev[0] )
		&& ((GPIO_0_expected_prev[0] !== last_GPIO_0_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[0] = GPIO_0_expected_prev[0];
	end
	if (
		( GPIO_0_expected_prev[1] !== 1'bx ) && ( GPIO_0_prev[1] !== GPIO_0_expected_prev[1] )
		&& ((GPIO_0_expected_prev[1] !== last_GPIO_0_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[1] = GPIO_0_expected_prev[1];
	end
	if (
		( GPIO_0_expected_prev[2] !== 1'bx ) && ( GPIO_0_prev[2] !== GPIO_0_expected_prev[2] )
		&& ((GPIO_0_expected_prev[2] !== last_GPIO_0_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[2] = GPIO_0_expected_prev[2];
	end
	if (
		( GPIO_0_expected_prev[3] !== 1'bx ) && ( GPIO_0_prev[3] !== GPIO_0_expected_prev[3] )
		&& ((GPIO_0_expected_prev[3] !== last_GPIO_0_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[3] = GPIO_0_expected_prev[3];
	end
	if (
		( GPIO_0_expected_prev[4] !== 1'bx ) && ( GPIO_0_prev[4] !== GPIO_0_expected_prev[4] )
		&& ((GPIO_0_expected_prev[4] !== last_GPIO_0_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[4] = GPIO_0_expected_prev[4];
	end
	if (
		( GPIO_0_expected_prev[5] !== 1'bx ) && ( GPIO_0_prev[5] !== GPIO_0_expected_prev[5] )
		&& ((GPIO_0_expected_prev[5] !== last_GPIO_0_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[5] = GPIO_0_expected_prev[5];
	end
	if (
		( GPIO_0_expected_prev[6] !== 1'bx ) && ( GPIO_0_prev[6] !== GPIO_0_expected_prev[6] )
		&& ((GPIO_0_expected_prev[6] !== last_GPIO_0_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[6] = GPIO_0_expected_prev[6];
	end
	if (
		( GPIO_0_expected_prev[7] !== 1'bx ) && ( GPIO_0_prev[7] !== GPIO_0_expected_prev[7] )
		&& ((GPIO_0_expected_prev[7] !== last_GPIO_0_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[7] = GPIO_0_expected_prev[7];
	end
	if (
		( GPIO_0_expected_prev[8] !== 1'bx ) && ( GPIO_0_prev[8] !== GPIO_0_expected_prev[8] )
		&& ((GPIO_0_expected_prev[8] !== last_GPIO_0_exp[8]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[8] = GPIO_0_expected_prev[8];
	end
	if (
		( GPIO_0_expected_prev[9] !== 1'bx ) && ( GPIO_0_prev[9] !== GPIO_0_expected_prev[9] )
		&& ((GPIO_0_expected_prev[9] !== last_GPIO_0_exp[9]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[9] = GPIO_0_expected_prev[9];
	end
	if (
		( GPIO_0_expected_prev[10] !== 1'bx ) && ( GPIO_0_prev[10] !== GPIO_0_expected_prev[10] )
		&& ((GPIO_0_expected_prev[10] !== last_GPIO_0_exp[10]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[10] = GPIO_0_expected_prev[10];
	end
	if (
		( GPIO_0_expected_prev[11] !== 1'bx ) && ( GPIO_0_prev[11] !== GPIO_0_expected_prev[11] )
		&& ((GPIO_0_expected_prev[11] !== last_GPIO_0_exp[11]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[11] = GPIO_0_expected_prev[11];
	end
	if (
		( GPIO_0_expected_prev[12] !== 1'bx ) && ( GPIO_0_prev[12] !== GPIO_0_expected_prev[12] )
		&& ((GPIO_0_expected_prev[12] !== last_GPIO_0_exp[12]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[12] = GPIO_0_expected_prev[12];
	end
	if (
		( GPIO_0_expected_prev[13] !== 1'bx ) && ( GPIO_0_prev[13] !== GPIO_0_expected_prev[13] )
		&& ((GPIO_0_expected_prev[13] !== last_GPIO_0_exp[13]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[13] = GPIO_0_expected_prev[13];
	end
	if (
		( GPIO_0_expected_prev[14] !== 1'bx ) && ( GPIO_0_prev[14] !== GPIO_0_expected_prev[14] )
		&& ((GPIO_0_expected_prev[14] !== last_GPIO_0_exp[14]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[14] = GPIO_0_expected_prev[14];
	end
	if (
		( GPIO_0_expected_prev[15] !== 1'bx ) && ( GPIO_0_prev[15] !== GPIO_0_expected_prev[15] )
		&& ((GPIO_0_expected_prev[15] !== last_GPIO_0_exp[15]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[15] = GPIO_0_expected_prev[15];
	end
	if (
		( GPIO_0_expected_prev[16] !== 1'bx ) && ( GPIO_0_prev[16] !== GPIO_0_expected_prev[16] )
		&& ((GPIO_0_expected_prev[16] !== last_GPIO_0_exp[16]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[16] = GPIO_0_expected_prev[16];
	end
	if (
		( GPIO_0_expected_prev[17] !== 1'bx ) && ( GPIO_0_prev[17] !== GPIO_0_expected_prev[17] )
		&& ((GPIO_0_expected_prev[17] !== last_GPIO_0_exp[17]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[17] = GPIO_0_expected_prev[17];
	end
	if (
		( GPIO_0_expected_prev[18] !== 1'bx ) && ( GPIO_0_prev[18] !== GPIO_0_expected_prev[18] )
		&& ((GPIO_0_expected_prev[18] !== last_GPIO_0_exp[18]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[18] = GPIO_0_expected_prev[18];
	end
	if (
		( GPIO_0_expected_prev[19] !== 1'bx ) && ( GPIO_0_prev[19] !== GPIO_0_expected_prev[19] )
		&& ((GPIO_0_expected_prev[19] !== last_GPIO_0_exp[19]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[19] = GPIO_0_expected_prev[19];
	end
	if (
		( GPIO_0_expected_prev[20] !== 1'bx ) && ( GPIO_0_prev[20] !== GPIO_0_expected_prev[20] )
		&& ((GPIO_0_expected_prev[20] !== last_GPIO_0_exp[20]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[20] = GPIO_0_expected_prev[20];
	end
	if (
		( GPIO_0_expected_prev[21] !== 1'bx ) && ( GPIO_0_prev[21] !== GPIO_0_expected_prev[21] )
		&& ((GPIO_0_expected_prev[21] !== last_GPIO_0_exp[21]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[21] = GPIO_0_expected_prev[21];
	end
	if (
		( GPIO_0_expected_prev[22] !== 1'bx ) && ( GPIO_0_prev[22] !== GPIO_0_expected_prev[22] )
		&& ((GPIO_0_expected_prev[22] !== last_GPIO_0_exp[22]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[22] = GPIO_0_expected_prev[22];
	end
	if (
		( GPIO_0_expected_prev[23] !== 1'bx ) && ( GPIO_0_prev[23] !== GPIO_0_expected_prev[23] )
		&& ((GPIO_0_expected_prev[23] !== last_GPIO_0_exp[23]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[23] = GPIO_0_expected_prev[23];
	end
	if (
		( GPIO_0_expected_prev[24] !== 1'bx ) && ( GPIO_0_prev[24] !== GPIO_0_expected_prev[24] )
		&& ((GPIO_0_expected_prev[24] !== last_GPIO_0_exp[24]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[24] = GPIO_0_expected_prev[24];
	end
	if (
		( GPIO_0_expected_prev[25] !== 1'bx ) && ( GPIO_0_prev[25] !== GPIO_0_expected_prev[25] )
		&& ((GPIO_0_expected_prev[25] !== last_GPIO_0_exp[25]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[25] = GPIO_0_expected_prev[25];
	end
	if (
		( GPIO_0_expected_prev[26] !== 1'bx ) && ( GPIO_0_prev[26] !== GPIO_0_expected_prev[26] )
		&& ((GPIO_0_expected_prev[26] !== last_GPIO_0_exp[26]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[26] = GPIO_0_expected_prev[26];
	end
	if (
		( GPIO_0_expected_prev[27] !== 1'bx ) && ( GPIO_0_prev[27] !== GPIO_0_expected_prev[27] )
		&& ((GPIO_0_expected_prev[27] !== last_GPIO_0_exp[27]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[27] = GPIO_0_expected_prev[27];
	end
	if (
		( GPIO_0_expected_prev[28] !== 1'bx ) && ( GPIO_0_prev[28] !== GPIO_0_expected_prev[28] )
		&& ((GPIO_0_expected_prev[28] !== last_GPIO_0_exp[28]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[28] = GPIO_0_expected_prev[28];
	end
	if (
		( GPIO_0_expected_prev[29] !== 1'bx ) && ( GPIO_0_prev[29] !== GPIO_0_expected_prev[29] )
		&& ((GPIO_0_expected_prev[29] !== last_GPIO_0_exp[29]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[29] = GPIO_0_expected_prev[29];
	end
	if (
		( GPIO_0_expected_prev[30] !== 1'bx ) && ( GPIO_0_prev[30] !== GPIO_0_expected_prev[30] )
		&& ((GPIO_0_expected_prev[30] !== last_GPIO_0_exp[30]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[30] = GPIO_0_expected_prev[30];
	end
	if (
		( GPIO_0_expected_prev[31] !== 1'bx ) && ( GPIO_0_prev[31] !== GPIO_0_expected_prev[31] )
		&& ((GPIO_0_expected_prev[31] !== last_GPIO_0_exp[31]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[31] = GPIO_0_expected_prev[31];
	end
	if (
		( GPIO_0_expected_prev[32] !== 1'bx ) && ( GPIO_0_prev[32] !== GPIO_0_expected_prev[32] )
		&& ((GPIO_0_expected_prev[32] !== last_GPIO_0_exp[32]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[32] = GPIO_0_expected_prev[32];
	end
	if (
		( GPIO_0_expected_prev[33] !== 1'bx ) && ( GPIO_0_prev[33] !== GPIO_0_expected_prev[33] )
		&& ((GPIO_0_expected_prev[33] !== last_GPIO_0_exp[33]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[33] = GPIO_0_expected_prev[33];
	end
	if (
		( GPIO_0_expected_prev[34] !== 1'bx ) && ( GPIO_0_prev[34] !== GPIO_0_expected_prev[34] )
		&& ((GPIO_0_expected_prev[34] !== last_GPIO_0_exp[34]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[34] = GPIO_0_expected_prev[34];
	end
	if (
		( GPIO_0_expected_prev[35] !== 1'bx ) && ( GPIO_0_prev[35] !== GPIO_0_expected_prev[35] )
		&& ((GPIO_0_expected_prev[35] !== last_GPIO_0_exp[35]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_0[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_0_expected_prev);
		$display ("     Real value = %b", GPIO_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_GPIO_0_exp[35] = GPIO_0_expected_prev[35];
	end
	if (
		( GPIO_1_expected_prev[0] !== 1'bx ) && ( GPIO_1_prev[0] !== GPIO_1_expected_prev[0] )
		&& ((GPIO_1_expected_prev[0] !== last_GPIO_1_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[0] = GPIO_1_expected_prev[0];
	end
	if (
		( GPIO_1_expected_prev[1] !== 1'bx ) && ( GPIO_1_prev[1] !== GPIO_1_expected_prev[1] )
		&& ((GPIO_1_expected_prev[1] !== last_GPIO_1_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[1] = GPIO_1_expected_prev[1];
	end
	if (
		( GPIO_1_expected_prev[2] !== 1'bx ) && ( GPIO_1_prev[2] !== GPIO_1_expected_prev[2] )
		&& ((GPIO_1_expected_prev[2] !== last_GPIO_1_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[2] = GPIO_1_expected_prev[2];
	end
	if (
		( GPIO_1_expected_prev[3] !== 1'bx ) && ( GPIO_1_prev[3] !== GPIO_1_expected_prev[3] )
		&& ((GPIO_1_expected_prev[3] !== last_GPIO_1_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[3] = GPIO_1_expected_prev[3];
	end
	if (
		( GPIO_1_expected_prev[4] !== 1'bx ) && ( GPIO_1_prev[4] !== GPIO_1_expected_prev[4] )
		&& ((GPIO_1_expected_prev[4] !== last_GPIO_1_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[4] = GPIO_1_expected_prev[4];
	end
	if (
		( GPIO_1_expected_prev[5] !== 1'bx ) && ( GPIO_1_prev[5] !== GPIO_1_expected_prev[5] )
		&& ((GPIO_1_expected_prev[5] !== last_GPIO_1_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[5] = GPIO_1_expected_prev[5];
	end
	if (
		( GPIO_1_expected_prev[6] !== 1'bx ) && ( GPIO_1_prev[6] !== GPIO_1_expected_prev[6] )
		&& ((GPIO_1_expected_prev[6] !== last_GPIO_1_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[6] = GPIO_1_expected_prev[6];
	end
	if (
		( GPIO_1_expected_prev[7] !== 1'bx ) && ( GPIO_1_prev[7] !== GPIO_1_expected_prev[7] )
		&& ((GPIO_1_expected_prev[7] !== last_GPIO_1_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[7] = GPIO_1_expected_prev[7];
	end
	if (
		( GPIO_1_expected_prev[8] !== 1'bx ) && ( GPIO_1_prev[8] !== GPIO_1_expected_prev[8] )
		&& ((GPIO_1_expected_prev[8] !== last_GPIO_1_exp[8]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[8] = GPIO_1_expected_prev[8];
	end
	if (
		( GPIO_1_expected_prev[9] !== 1'bx ) && ( GPIO_1_prev[9] !== GPIO_1_expected_prev[9] )
		&& ((GPIO_1_expected_prev[9] !== last_GPIO_1_exp[9]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[9] = GPIO_1_expected_prev[9];
	end
	if (
		( GPIO_1_expected_prev[10] !== 1'bx ) && ( GPIO_1_prev[10] !== GPIO_1_expected_prev[10] )
		&& ((GPIO_1_expected_prev[10] !== last_GPIO_1_exp[10]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[10] = GPIO_1_expected_prev[10];
	end
	if (
		( GPIO_1_expected_prev[11] !== 1'bx ) && ( GPIO_1_prev[11] !== GPIO_1_expected_prev[11] )
		&& ((GPIO_1_expected_prev[11] !== last_GPIO_1_exp[11]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[11] = GPIO_1_expected_prev[11];
	end
	if (
		( GPIO_1_expected_prev[12] !== 1'bx ) && ( GPIO_1_prev[12] !== GPIO_1_expected_prev[12] )
		&& ((GPIO_1_expected_prev[12] !== last_GPIO_1_exp[12]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[12] = GPIO_1_expected_prev[12];
	end
	if (
		( GPIO_1_expected_prev[13] !== 1'bx ) && ( GPIO_1_prev[13] !== GPIO_1_expected_prev[13] )
		&& ((GPIO_1_expected_prev[13] !== last_GPIO_1_exp[13]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[13] = GPIO_1_expected_prev[13];
	end
	if (
		( GPIO_1_expected_prev[14] !== 1'bx ) && ( GPIO_1_prev[14] !== GPIO_1_expected_prev[14] )
		&& ((GPIO_1_expected_prev[14] !== last_GPIO_1_exp[14]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[14] = GPIO_1_expected_prev[14];
	end
	if (
		( GPIO_1_expected_prev[15] !== 1'bx ) && ( GPIO_1_prev[15] !== GPIO_1_expected_prev[15] )
		&& ((GPIO_1_expected_prev[15] !== last_GPIO_1_exp[15]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[15] = GPIO_1_expected_prev[15];
	end
	if (
		( GPIO_1_expected_prev[16] !== 1'bx ) && ( GPIO_1_prev[16] !== GPIO_1_expected_prev[16] )
		&& ((GPIO_1_expected_prev[16] !== last_GPIO_1_exp[16]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[16] = GPIO_1_expected_prev[16];
	end
	if (
		( GPIO_1_expected_prev[17] !== 1'bx ) && ( GPIO_1_prev[17] !== GPIO_1_expected_prev[17] )
		&& ((GPIO_1_expected_prev[17] !== last_GPIO_1_exp[17]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[17] = GPIO_1_expected_prev[17];
	end
	if (
		( GPIO_1_expected_prev[18] !== 1'bx ) && ( GPIO_1_prev[18] !== GPIO_1_expected_prev[18] )
		&& ((GPIO_1_expected_prev[18] !== last_GPIO_1_exp[18]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[18] = GPIO_1_expected_prev[18];
	end
	if (
		( GPIO_1_expected_prev[19] !== 1'bx ) && ( GPIO_1_prev[19] !== GPIO_1_expected_prev[19] )
		&& ((GPIO_1_expected_prev[19] !== last_GPIO_1_exp[19]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[19] = GPIO_1_expected_prev[19];
	end
	if (
		( GPIO_1_expected_prev[20] !== 1'bx ) && ( GPIO_1_prev[20] !== GPIO_1_expected_prev[20] )
		&& ((GPIO_1_expected_prev[20] !== last_GPIO_1_exp[20]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[20] = GPIO_1_expected_prev[20];
	end
	if (
		( GPIO_1_expected_prev[21] !== 1'bx ) && ( GPIO_1_prev[21] !== GPIO_1_expected_prev[21] )
		&& ((GPIO_1_expected_prev[21] !== last_GPIO_1_exp[21]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[21] = GPIO_1_expected_prev[21];
	end
	if (
		( GPIO_1_expected_prev[22] !== 1'bx ) && ( GPIO_1_prev[22] !== GPIO_1_expected_prev[22] )
		&& ((GPIO_1_expected_prev[22] !== last_GPIO_1_exp[22]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[22] = GPIO_1_expected_prev[22];
	end
	if (
		( GPIO_1_expected_prev[23] !== 1'bx ) && ( GPIO_1_prev[23] !== GPIO_1_expected_prev[23] )
		&& ((GPIO_1_expected_prev[23] !== last_GPIO_1_exp[23]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[23] = GPIO_1_expected_prev[23];
	end
	if (
		( GPIO_1_expected_prev[24] !== 1'bx ) && ( GPIO_1_prev[24] !== GPIO_1_expected_prev[24] )
		&& ((GPIO_1_expected_prev[24] !== last_GPIO_1_exp[24]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[24] = GPIO_1_expected_prev[24];
	end
	if (
		( GPIO_1_expected_prev[25] !== 1'bx ) && ( GPIO_1_prev[25] !== GPIO_1_expected_prev[25] )
		&& ((GPIO_1_expected_prev[25] !== last_GPIO_1_exp[25]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[25] = GPIO_1_expected_prev[25];
	end
	if (
		( GPIO_1_expected_prev[26] !== 1'bx ) && ( GPIO_1_prev[26] !== GPIO_1_expected_prev[26] )
		&& ((GPIO_1_expected_prev[26] !== last_GPIO_1_exp[26]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[26] = GPIO_1_expected_prev[26];
	end
	if (
		( GPIO_1_expected_prev[27] !== 1'bx ) && ( GPIO_1_prev[27] !== GPIO_1_expected_prev[27] )
		&& ((GPIO_1_expected_prev[27] !== last_GPIO_1_exp[27]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[27] = GPIO_1_expected_prev[27];
	end
	if (
		( GPIO_1_expected_prev[28] !== 1'bx ) && ( GPIO_1_prev[28] !== GPIO_1_expected_prev[28] )
		&& ((GPIO_1_expected_prev[28] !== last_GPIO_1_exp[28]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[28] = GPIO_1_expected_prev[28];
	end
	if (
		( GPIO_1_expected_prev[29] !== 1'bx ) && ( GPIO_1_prev[29] !== GPIO_1_expected_prev[29] )
		&& ((GPIO_1_expected_prev[29] !== last_GPIO_1_exp[29]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[29] = GPIO_1_expected_prev[29];
	end
	if (
		( GPIO_1_expected_prev[30] !== 1'bx ) && ( GPIO_1_prev[30] !== GPIO_1_expected_prev[30] )
		&& ((GPIO_1_expected_prev[30] !== last_GPIO_1_exp[30]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[30] = GPIO_1_expected_prev[30];
	end
	if (
		( GPIO_1_expected_prev[31] !== 1'bx ) && ( GPIO_1_prev[31] !== GPIO_1_expected_prev[31] )
		&& ((GPIO_1_expected_prev[31] !== last_GPIO_1_exp[31]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[31] = GPIO_1_expected_prev[31];
	end
	if (
		( GPIO_1_expected_prev[32] !== 1'bx ) && ( GPIO_1_prev[32] !== GPIO_1_expected_prev[32] )
		&& ((GPIO_1_expected_prev[32] !== last_GPIO_1_exp[32]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[32] = GPIO_1_expected_prev[32];
	end
	if (
		( GPIO_1_expected_prev[33] !== 1'bx ) && ( GPIO_1_prev[33] !== GPIO_1_expected_prev[33] )
		&& ((GPIO_1_expected_prev[33] !== last_GPIO_1_exp[33]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[33] = GPIO_1_expected_prev[33];
	end
	if (
		( GPIO_1_expected_prev[34] !== 1'bx ) && ( GPIO_1_prev[34] !== GPIO_1_expected_prev[34] )
		&& ((GPIO_1_expected_prev[34] !== last_GPIO_1_exp[34]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[34] = GPIO_1_expected_prev[34];
	end
	if (
		( GPIO_1_expected_prev[35] !== 1'bx ) && ( GPIO_1_prev[35] !== GPIO_1_expected_prev[35] )
		&& ((GPIO_1_expected_prev[35] !== last_GPIO_1_exp[35]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_GPIO_1_exp[35] = GPIO_1_expected_prev[35];
	end
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX1_expected_prev[5] !== 1'bx ) && ( HEX1_prev[5] !== HEX1_expected_prev[5] )
		&& ((HEX1_expected_prev[5] !== last_HEX1_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[5] = HEX1_expected_prev[5];
	end
	if (
		( HEX1_expected_prev[6] !== 1'bx ) && ( HEX1_prev[6] !== HEX1_expected_prev[6] )
		&& ((HEX1_expected_prev[6] !== last_HEX1_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_HEX1_exp[6] = HEX1_expected_prev[6];
	end
	if (
		( HEX2_expected_prev[0] !== 1'bx ) && ( HEX2_prev[0] !== HEX2_expected_prev[0] )
		&& ((HEX2_expected_prev[0] !== last_HEX2_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[0] = HEX2_expected_prev[0];
	end
	if (
		( HEX2_expected_prev[1] !== 1'bx ) && ( HEX2_prev[1] !== HEX2_expected_prev[1] )
		&& ((HEX2_expected_prev[1] !== last_HEX2_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[1] = HEX2_expected_prev[1];
	end
	if (
		( HEX2_expected_prev[2] !== 1'bx ) && ( HEX2_prev[2] !== HEX2_expected_prev[2] )
		&& ((HEX2_expected_prev[2] !== last_HEX2_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[2] = HEX2_expected_prev[2];
	end
	if (
		( HEX2_expected_prev[3] !== 1'bx ) && ( HEX2_prev[3] !== HEX2_expected_prev[3] )
		&& ((HEX2_expected_prev[3] !== last_HEX2_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[3] = HEX2_expected_prev[3];
	end
	if (
		( HEX2_expected_prev[4] !== 1'bx ) && ( HEX2_prev[4] !== HEX2_expected_prev[4] )
		&& ((HEX2_expected_prev[4] !== last_HEX2_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[4] = HEX2_expected_prev[4];
	end
	if (
		( HEX2_expected_prev[5] !== 1'bx ) && ( HEX2_prev[5] !== HEX2_expected_prev[5] )
		&& ((HEX2_expected_prev[5] !== last_HEX2_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[5] = HEX2_expected_prev[5];
	end
	if (
		( HEX2_expected_prev[6] !== 1'bx ) && ( HEX2_prev[6] !== HEX2_expected_prev[6] )
		&& ((HEX2_expected_prev[6] !== last_HEX2_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_HEX2_exp[6] = HEX2_expected_prev[6];
	end
	if (
		( HEX3_expected_prev[0] !== 1'bx ) && ( HEX3_prev[0] !== HEX3_expected_prev[0] )
		&& ((HEX3_expected_prev[0] !== last_HEX3_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[0] = HEX3_expected_prev[0];
	end
	if (
		( HEX3_expected_prev[1] !== 1'bx ) && ( HEX3_prev[1] !== HEX3_expected_prev[1] )
		&& ((HEX3_expected_prev[1] !== last_HEX3_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[1] = HEX3_expected_prev[1];
	end
	if (
		( HEX3_expected_prev[2] !== 1'bx ) && ( HEX3_prev[2] !== HEX3_expected_prev[2] )
		&& ((HEX3_expected_prev[2] !== last_HEX3_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[2] = HEX3_expected_prev[2];
	end
	if (
		( HEX3_expected_prev[3] !== 1'bx ) && ( HEX3_prev[3] !== HEX3_expected_prev[3] )
		&& ((HEX3_expected_prev[3] !== last_HEX3_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[3] = HEX3_expected_prev[3];
	end
	if (
		( HEX3_expected_prev[4] !== 1'bx ) && ( HEX3_prev[4] !== HEX3_expected_prev[4] )
		&& ((HEX3_expected_prev[4] !== last_HEX3_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[4] = HEX3_expected_prev[4];
	end
	if (
		( HEX3_expected_prev[5] !== 1'bx ) && ( HEX3_prev[5] !== HEX3_expected_prev[5] )
		&& ((HEX3_expected_prev[5] !== last_HEX3_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[5] = HEX3_expected_prev[5];
	end
	if (
		( HEX3_expected_prev[6] !== 1'bx ) && ( HEX3_prev[6] !== HEX3_expected_prev[6] )
		&& ((HEX3_expected_prev[6] !== last_HEX3_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_HEX3_exp[6] = HEX3_expected_prev[6];
	end
	if (
		( HEX4_expected_prev[0] !== 1'bx ) && ( HEX4_prev[0] !== HEX4_expected_prev[0] )
		&& ((HEX4_expected_prev[0] !== last_HEX4_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[0] = HEX4_expected_prev[0];
	end
	if (
		( HEX4_expected_prev[1] !== 1'bx ) && ( HEX4_prev[1] !== HEX4_expected_prev[1] )
		&& ((HEX4_expected_prev[1] !== last_HEX4_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[1] = HEX4_expected_prev[1];
	end
	if (
		( HEX4_expected_prev[2] !== 1'bx ) && ( HEX4_prev[2] !== HEX4_expected_prev[2] )
		&& ((HEX4_expected_prev[2] !== last_HEX4_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[2] = HEX4_expected_prev[2];
	end
	if (
		( HEX4_expected_prev[3] !== 1'bx ) && ( HEX4_prev[3] !== HEX4_expected_prev[3] )
		&& ((HEX4_expected_prev[3] !== last_HEX4_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[3] = HEX4_expected_prev[3];
	end
	if (
		( HEX4_expected_prev[4] !== 1'bx ) && ( HEX4_prev[4] !== HEX4_expected_prev[4] )
		&& ((HEX4_expected_prev[4] !== last_HEX4_exp[4]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[4] = HEX4_expected_prev[4];
	end
	if (
		( HEX4_expected_prev[5] !== 1'bx ) && ( HEX4_prev[5] !== HEX4_expected_prev[5] )
		&& ((HEX4_expected_prev[5] !== last_HEX4_exp[5]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[5] = HEX4_expected_prev[5];
	end
	if (
		( HEX4_expected_prev[6] !== 1'bx ) && ( HEX4_prev[6] !== HEX4_expected_prev[6] )
		&& ((HEX4_expected_prev[6] !== last_HEX4_exp[6]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_HEX4_exp[6] = HEX4_expected_prev[6];
	end
	if (
		( HEX5_expected_prev[0] !== 1'bx ) && ( HEX5_prev[0] !== HEX5_expected_prev[0] )
		&& ((HEX5_expected_prev[0] !== last_HEX5_exp[0]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[0] = HEX5_expected_prev[0];
	end
	if (
		( HEX5_expected_prev[1] !== 1'bx ) && ( HEX5_prev[1] !== HEX5_expected_prev[1] )
		&& ((HEX5_expected_prev[1] !== last_HEX5_exp[1]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[1] = HEX5_expected_prev[1];
	end
	if (
		( HEX5_expected_prev[2] !== 1'bx ) && ( HEX5_prev[2] !== HEX5_expected_prev[2] )
		&& ((HEX5_expected_prev[2] !== last_HEX5_exp[2]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[2] = HEX5_expected_prev[2];
	end
	if (
		( HEX5_expected_prev[3] !== 1'bx ) && ( HEX5_prev[3] !== HEX5_expected_prev[3] )
		&& ((HEX5_expected_prev[3] !== last_HEX5_exp[3]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[3] = HEX5_expected_prev[3];
	end
	if (
		( HEX5_expected_prev[4] !== 1'bx ) && ( HEX5_prev[4] !== HEX5_expected_prev[4] )
		&& ((HEX5_expected_prev[4] !== last_HEX5_exp[4]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[4] = HEX5_expected_prev[4];
	end
	if (
		( HEX5_expected_prev[5] !== 1'bx ) && ( HEX5_prev[5] !== HEX5_expected_prev[5] )
		&& ((HEX5_expected_prev[5] !== last_HEX5_exp[5]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[5] = HEX5_expected_prev[5];
	end
	if (
		( HEX5_expected_prev[6] !== 1'bx ) && ( HEX5_prev[6] !== HEX5_expected_prev[6] )
		&& ((HEX5_expected_prev[6] !== last_HEX5_exp[6]) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_HEX5_exp[6] = HEX5_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end
	if (
		( PS2_CLK_expected_prev !== 1'bx ) && ( PS2_CLK_prev !== PS2_CLK_expected_prev )
		&& ((PS2_CLK_expected_prev !== last_PS2_CLK_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PS2_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PS2_CLK_expected_prev);
		$display ("     Real value = %b", PS2_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_PS2_CLK_exp = PS2_CLK_expected_prev;
	end
	if (
		( PS2_DAT_expected_prev !== 1'bx ) && ( PS2_DAT_prev !== PS2_DAT_expected_prev )
		&& ((PS2_DAT_expected_prev !== last_PS2_DAT_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PS2_DAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PS2_DAT_expected_prev);
		$display ("     Real value = %b", PS2_DAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_PS2_DAT_exp = PS2_DAT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module simple_ipod_solution_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLOCK_50;
reg [15:0] treg_DRAM_DQ;
reg treg_FPGA_I2C_SDAT;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg [3:0] KEY;
reg treg_PS2_CLK;
reg treg_PS2_DAT;
reg [9:0] SW;
// wires                                               
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire [12:0] DRAM_ADDR;
wire [1:0] DRAM_BA;
wire DRAM_CAS_N;
wire DRAM_CKE;
wire DRAM_CLK;
wire DRAM_CS_N;
wire [15:0] DRAM_DQ;
wire DRAM_LDQM;
wire DRAM_RAS_N;
wire DRAM_UDQM;
wire DRAM_WE_N;
wire FPGA_I2C_SCLK;
wire FPGA_I2C_SDAT;
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [9:0] LEDR;
wire PS2_CLK;
wire PS2_DAT;

wire sampler;                             

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign DRAM_DQ = treg_DRAM_DQ;
assign FPGA_I2C_SDAT = treg_FPGA_I2C_SDAT;
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
assign PS2_CLK = treg_PS2_CLK;
assign PS2_DAT = treg_PS2_DAT;
simple_ipod_solution i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK_50(CLOCK_50),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.KEY(KEY),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.SW(SW)
);

// AUD_ADCDAT
initial
begin
	AUD_ADCDAT = 1'b0;
end 

// AUD_ADCLRCK
initial
begin
	treg_AUD_ADCLRCK = 1'bZ;
end 

// AUD_BCLK
initial
begin
	treg_AUD_BCLK = 1'bZ;
end 

// AUD_DACLRCK
initial
begin
	treg_AUD_DACLRCK = 1'bZ;
end 

// CLOCK_50
initial
begin
	CLOCK_50 = 1'b0;
end 
// DRAM_DQ[ 15 ]
initial
begin
	treg_DRAM_DQ[15] = 1'bZ;
end 
// DRAM_DQ[ 14 ]
initial
begin
	treg_DRAM_DQ[14] = 1'bZ;
end 
// DRAM_DQ[ 13 ]
initial
begin
	treg_DRAM_DQ[13] = 1'bZ;
end 
// DRAM_DQ[ 12 ]
initial
begin
	treg_DRAM_DQ[12] = 1'bZ;
end 
// DRAM_DQ[ 11 ]
initial
begin
	treg_DRAM_DQ[11] = 1'bZ;
end 
// DRAM_DQ[ 10 ]
initial
begin
	treg_DRAM_DQ[10] = 1'bZ;
end 
// DRAM_DQ[ 9 ]
initial
begin
	treg_DRAM_DQ[9] = 1'bZ;
end 
// DRAM_DQ[ 8 ]
initial
begin
	treg_DRAM_DQ[8] = 1'bZ;
end 
// DRAM_DQ[ 7 ]
initial
begin
	treg_DRAM_DQ[7] = 1'bZ;
end 
// DRAM_DQ[ 6 ]
initial
begin
	treg_DRAM_DQ[6] = 1'bZ;
end 
// DRAM_DQ[ 5 ]
initial
begin
	treg_DRAM_DQ[5] = 1'bZ;
end 
// DRAM_DQ[ 4 ]
initial
begin
	treg_DRAM_DQ[4] = 1'bZ;
end 
// DRAM_DQ[ 3 ]
initial
begin
	treg_DRAM_DQ[3] = 1'bZ;
end 
// DRAM_DQ[ 2 ]
initial
begin
	treg_DRAM_DQ[2] = 1'bZ;
end 
// DRAM_DQ[ 1 ]
initial
begin
	treg_DRAM_DQ[1] = 1'bZ;
end 
// DRAM_DQ[ 0 ]
initial
begin
	treg_DRAM_DQ[0] = 1'bZ;
end 

// FPGA_I2C_SDAT
initial
begin
	treg_FPGA_I2C_SDAT = 1'bZ;
end 
// GPIO_0[ 35 ]
initial
begin
	treg_GPIO_0[35] = 1'bZ;
end 
// GPIO_0[ 34 ]
initial
begin
	treg_GPIO_0[34] = 1'bZ;
end 
// GPIO_0[ 33 ]
initial
begin
	treg_GPIO_0[33] = 1'bZ;
end 
// GPIO_0[ 32 ]
initial
begin
	treg_GPIO_0[32] = 1'bZ;
end 
// GPIO_0[ 31 ]
initial
begin
	treg_GPIO_0[31] = 1'bZ;
end 
// GPIO_0[ 30 ]
initial
begin
	treg_GPIO_0[30] = 1'bZ;
end 
// GPIO_0[ 29 ]
initial
begin
	treg_GPIO_0[29] = 1'bZ;
end 
// GPIO_0[ 28 ]
initial
begin
	treg_GPIO_0[28] = 1'bZ;
end 
// GPIO_0[ 27 ]
initial
begin
	treg_GPIO_0[27] = 1'bZ;
end 
// GPIO_0[ 26 ]
initial
begin
	treg_GPIO_0[26] = 1'bZ;
end 
// GPIO_0[ 25 ]
initial
begin
	treg_GPIO_0[25] = 1'bZ;
end 
// GPIO_0[ 24 ]
initial
begin
	treg_GPIO_0[24] = 1'bZ;
end 
// GPIO_0[ 23 ]
initial
begin
	treg_GPIO_0[23] = 1'bZ;
end 
// GPIO_0[ 22 ]
initial
begin
	treg_GPIO_0[22] = 1'bZ;
end 
// GPIO_0[ 21 ]
initial
begin
	treg_GPIO_0[21] = 1'bZ;
end 
// GPIO_0[ 20 ]
initial
begin
	treg_GPIO_0[20] = 1'bZ;
end 
// GPIO_0[ 19 ]
initial
begin
	treg_GPIO_0[19] = 1'bZ;
end 
// GPIO_0[ 18 ]
initial
begin
	treg_GPIO_0[18] = 1'bZ;
end 
// GPIO_0[ 17 ]
initial
begin
	treg_GPIO_0[17] = 1'bZ;
end 
// GPIO_0[ 16 ]
initial
begin
	treg_GPIO_0[16] = 1'bZ;
end 
// GPIO_0[ 15 ]
initial
begin
	treg_GPIO_0[15] = 1'bZ;
end 
// GPIO_0[ 14 ]
initial
begin
	treg_GPIO_0[14] = 1'bZ;
end 
// GPIO_0[ 13 ]
initial
begin
	treg_GPIO_0[13] = 1'bZ;
end 
// GPIO_0[ 12 ]
initial
begin
	treg_GPIO_0[12] = 1'bZ;
end 
// GPIO_0[ 11 ]
initial
begin
	treg_GPIO_0[11] = 1'bZ;
end 
// GPIO_0[ 10 ]
initial
begin
	treg_GPIO_0[10] = 1'bZ;
end 
// GPIO_0[ 9 ]
initial
begin
	treg_GPIO_0[9] = 1'bZ;
end 
// GPIO_0[ 8 ]
initial
begin
	treg_GPIO_0[8] = 1'bZ;
end 
// GPIO_0[ 7 ]
initial
begin
	treg_GPIO_0[7] = 1'bZ;
end 
// GPIO_0[ 6 ]
initial
begin
	treg_GPIO_0[6] = 1'bZ;
end 
// GPIO_0[ 5 ]
initial
begin
	treg_GPIO_0[5] = 1'bZ;
end 
// GPIO_0[ 4 ]
initial
begin
	treg_GPIO_0[4] = 1'bZ;
end 
// GPIO_0[ 3 ]
initial
begin
	treg_GPIO_0[3] = 1'bZ;
end 
// GPIO_0[ 2 ]
initial
begin
	treg_GPIO_0[2] = 1'bZ;
end 
// GPIO_0[ 1 ]
initial
begin
	treg_GPIO_0[1] = 1'bZ;
end 
// GPIO_0[ 0 ]
initial
begin
	treg_GPIO_0[0] = 1'bZ;
end 
// GPIO_1[ 35 ]
initial
begin
	treg_GPIO_1[35] = 1'bZ;
end 
// GPIO_1[ 34 ]
initial
begin
	treg_GPIO_1[34] = 1'bZ;
end 
// GPIO_1[ 33 ]
initial
begin
	treg_GPIO_1[33] = 1'bZ;
end 
// GPIO_1[ 32 ]
initial
begin
	treg_GPIO_1[32] = 1'bZ;
end 
// GPIO_1[ 31 ]
initial
begin
	treg_GPIO_1[31] = 1'bZ;
end 
// GPIO_1[ 30 ]
initial
begin
	treg_GPIO_1[30] = 1'bZ;
end 
// GPIO_1[ 29 ]
initial
begin
	treg_GPIO_1[29] = 1'bZ;
end 
// GPIO_1[ 28 ]
initial
begin
	treg_GPIO_1[28] = 1'bZ;
end 
// GPIO_1[ 27 ]
initial
begin
	treg_GPIO_1[27] = 1'bZ;
end 
// GPIO_1[ 26 ]
initial
begin
	treg_GPIO_1[26] = 1'bZ;
end 
// GPIO_1[ 25 ]
initial
begin
	treg_GPIO_1[25] = 1'bZ;
end 
// GPIO_1[ 24 ]
initial
begin
	treg_GPIO_1[24] = 1'bZ;
end 
// GPIO_1[ 23 ]
initial
begin
	treg_GPIO_1[23] = 1'bZ;
end 
// GPIO_1[ 22 ]
initial
begin
	treg_GPIO_1[22] = 1'bZ;
end 
// GPIO_1[ 21 ]
initial
begin
	treg_GPIO_1[21] = 1'bZ;
end 
// GPIO_1[ 20 ]
initial
begin
	treg_GPIO_1[20] = 1'bZ;
end 
// GPIO_1[ 19 ]
initial
begin
	treg_GPIO_1[19] = 1'bZ;
end 
// GPIO_1[ 18 ]
initial
begin
	treg_GPIO_1[18] = 1'bZ;
end 
// GPIO_1[ 17 ]
initial
begin
	treg_GPIO_1[17] = 1'bZ;
end 
// GPIO_1[ 16 ]
initial
begin
	treg_GPIO_1[16] = 1'bZ;
end 
// GPIO_1[ 15 ]
initial
begin
	treg_GPIO_1[15] = 1'bZ;
end 
// GPIO_1[ 14 ]
initial
begin
	treg_GPIO_1[14] = 1'bZ;
end 
// GPIO_1[ 13 ]
initial
begin
	treg_GPIO_1[13] = 1'bZ;
end 
// GPIO_1[ 12 ]
initial
begin
	treg_GPIO_1[12] = 1'bZ;
end 
// GPIO_1[ 11 ]
initial
begin
	treg_GPIO_1[11] = 1'bZ;
end 
// GPIO_1[ 10 ]
initial
begin
	treg_GPIO_1[10] = 1'bZ;
end 
// GPIO_1[ 9 ]
initial
begin
	treg_GPIO_1[9] = 1'bZ;
end 
// GPIO_1[ 8 ]
initial
begin
	treg_GPIO_1[8] = 1'bZ;
end 
// GPIO_1[ 7 ]
initial
begin
	treg_GPIO_1[7] = 1'bZ;
end 
// GPIO_1[ 6 ]
initial
begin
	treg_GPIO_1[6] = 1'bZ;
end 
// GPIO_1[ 5 ]
initial
begin
	treg_GPIO_1[5] = 1'bZ;
end 
// GPIO_1[ 4 ]
initial
begin
	treg_GPIO_1[4] = 1'bZ;
end 
// GPIO_1[ 3 ]
initial
begin
	treg_GPIO_1[3] = 1'bZ;
end 
// GPIO_1[ 2 ]
initial
begin
	treg_GPIO_1[2] = 1'bZ;
end 
// GPIO_1[ 1 ]
initial
begin
	treg_GPIO_1[1] = 1'bZ;
end 
// GPIO_1[ 0 ]
initial
begin
	treg_GPIO_1[0] = 1'bZ;
end 
// KEY[ 3 ]
initial
begin
	KEY[3] = 1'b0;
end 
// KEY[ 2 ]
initial
begin
	KEY[2] = 1'b0;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
end 

// PS2_CLK
initial
begin
	treg_PS2_CLK = 1'bZ;
end 

// PS2_DAT
initial
begin
	treg_PS2_DAT = 1'bZ;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

simple_ipod_solution_vlg_sample_tst tb_sample (
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACLRCK(AUD_DACLRCK),
	.CLOCK_50(CLOCK_50),
	.DRAM_DQ(DRAM_DQ),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.KEY(KEY),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.SW(SW),
	.sampler_tx(sampler)
);

simple_ipod_solution_vlg_check_tst tb_out(
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.DRAM_ADDR(DRAM_ADDR),
	.DRAM_BA(DRAM_BA),
	.DRAM_CAS_N(DRAM_CAS_N),
	.DRAM_CKE(DRAM_CKE),
	.DRAM_CLK(DRAM_CLK),
	.DRAM_CS_N(DRAM_CS_N),
	.DRAM_DQ(DRAM_DQ),
	.DRAM_LDQM(DRAM_LDQM),
	.DRAM_RAS_N(DRAM_RAS_N),
	.DRAM_UDQM(DRAM_UDQM),
	.DRAM_WE_N(DRAM_WE_N),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT),
	.sampler_rx(sampler)
);
endmodule

