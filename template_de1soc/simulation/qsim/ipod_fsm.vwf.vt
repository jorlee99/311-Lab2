// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2020 00:53:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ipod_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ipod_fsm_vlg_sample_tst(
	addr_reset,
	aud_clk_22khz,
	clock,
	direction,
	pause,
	read_data,
	reset,
	start_read,
	timer_finish,
	sampler_tx
);
input  addr_reset;
input  aud_clk_22khz;
input  clock;
input  direction;
input  pause;
input [31:0] read_data;
input  reset;
input  start_read;
input  timer_finish;
output sampler_tx;

reg sample;
time current_time;
always @(addr_reset or aud_clk_22khz or clock or direction or pause or read_data or reset or start_read or timer_finish)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ipod_fsm_vlg_check_tst (
	address,
	aud_data_out,
	audio_finish,
	byteenable,
	mem_read,
	read_data_request,
	state,
	sampler_rx
);
input [22:0] address;
input [7:0] aud_data_out;
input  audio_finish;
input [3:0] byteenable;
input  mem_read;
input  read_data_request;
input [6:0] state;
input sampler_rx;

reg [22:0] address_expected;
reg [7:0] aud_data_out_expected;
reg  audio_finish_expected;
reg [3:0] byteenable_expected;
reg  mem_read_expected;
reg  read_data_request_expected;
reg [6:0] state_expected;

reg [22:0] address_prev;
reg [7:0] aud_data_out_prev;
reg  audio_finish_prev;
reg [3:0] byteenable_prev;
reg  mem_read_prev;
reg  read_data_request_prev;
reg [6:0] state_prev;

reg [22:0] address_expected_prev;
reg [7:0] aud_data_out_expected_prev;
reg  audio_finish_expected_prev;
reg [3:0] byteenable_expected_prev;
reg  mem_read_expected_prev;
reg  read_data_request_expected_prev;
reg [6:0] state_expected_prev;

reg [22:0] last_address_exp;
reg [7:0] last_aud_data_out_exp;
reg  last_audio_finish_exp;
reg [3:0] last_byteenable_exp;
reg  last_mem_read_exp;
reg  last_read_data_request_exp;
reg [6:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	address_prev = address;
	aud_data_out_prev = aud_data_out;
	audio_finish_prev = audio_finish;
	byteenable_prev = byteenable;
	mem_read_prev = mem_read;
	read_data_request_prev = read_data_request;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	address_expected_prev = address_expected;
	aud_data_out_expected_prev = aud_data_out_expected;
	audio_finish_expected_prev = audio_finish_expected;
	byteenable_expected_prev = byteenable_expected;
	mem_read_expected_prev = mem_read_expected;
	read_data_request_expected_prev = read_data_request_expected;
	state_expected_prev = state_expected;
end


// expected address[ 22 ]
initial
begin
	address_expected[22] = 1'bX;
end 
// expected address[ 21 ]
initial
begin
	address_expected[21] = 1'bX;
end 
// expected address[ 20 ]
initial
begin
	address_expected[20] = 1'bX;
end 
// expected address[ 19 ]
initial
begin
	address_expected[19] = 1'bX;
end 
// expected address[ 18 ]
initial
begin
	address_expected[18] = 1'bX;
end 
// expected address[ 17 ]
initial
begin
	address_expected[17] = 1'bX;
end 
// expected address[ 16 ]
initial
begin
	address_expected[16] = 1'bX;
end 
// expected address[ 15 ]
initial
begin
	address_expected[15] = 1'bX;
end 
// expected address[ 14 ]
initial
begin
	address_expected[14] = 1'bX;
end 
// expected address[ 13 ]
initial
begin
	address_expected[13] = 1'bX;
end 
// expected address[ 12 ]
initial
begin
	address_expected[12] = 1'bX;
end 
// expected address[ 11 ]
initial
begin
	address_expected[11] = 1'bX;
end 
// expected address[ 10 ]
initial
begin
	address_expected[10] = 1'bX;
end 
// expected address[ 9 ]
initial
begin
	address_expected[9] = 1'bX;
end 
// expected address[ 8 ]
initial
begin
	address_expected[8] = 1'bX;
end 
// expected address[ 7 ]
initial
begin
	address_expected[7] = 1'bX;
end 
// expected address[ 6 ]
initial
begin
	address_expected[6] = 1'bX;
end 
// expected address[ 5 ]
initial
begin
	address_expected[5] = 1'bX;
end 
// expected address[ 4 ]
initial
begin
	address_expected[4] = 1'bX;
end 
// expected address[ 3 ]
initial
begin
	address_expected[3] = 1'bX;
end 
// expected address[ 2 ]
initial
begin
	address_expected[2] = 1'bX;
end 
// expected address[ 1 ]
initial
begin
	address_expected[1] = 1'bX;
end 
// expected address[ 0 ]
initial
begin
	address_expected[0] = 1'bX;
end 
// expected aud_data_out[ 7 ]
initial
begin
	aud_data_out_expected[7] = 1'bX;
end 
// expected aud_data_out[ 6 ]
initial
begin
	aud_data_out_expected[6] = 1'bX;
end 
// expected aud_data_out[ 5 ]
initial
begin
	aud_data_out_expected[5] = 1'bX;
end 
// expected aud_data_out[ 4 ]
initial
begin
	aud_data_out_expected[4] = 1'bX;
end 
// expected aud_data_out[ 3 ]
initial
begin
	aud_data_out_expected[3] = 1'bX;
end 
// expected aud_data_out[ 2 ]
initial
begin
	aud_data_out_expected[2] = 1'bX;
end 
// expected aud_data_out[ 1 ]
initial
begin
	aud_data_out_expected[1] = 1'bX;
end 
// expected aud_data_out[ 0 ]
initial
begin
	aud_data_out_expected[0] = 1'bX;
end 

// expected audio_finish
initial
begin
	audio_finish_expected = 1'bX;
end 
// expected byteenable[ 3 ]
initial
begin
	byteenable_expected[3] = 1'bX;
end 
// expected byteenable[ 2 ]
initial
begin
	byteenable_expected[2] = 1'bX;
end 
// expected byteenable[ 1 ]
initial
begin
	byteenable_expected[1] = 1'bX;
end 
// expected byteenable[ 0 ]
initial
begin
	byteenable_expected[0] = 1'bX;
end 

// expected mem_read
initial
begin
	mem_read_expected = 1'bX;
end 

// expected read_data_request
initial
begin
	read_data_request_expected = 1'bX;
end 
// expected state[ 6 ]
initial
begin
	state_expected[6] = 1'bX;
end 
// expected state[ 5 ]
initial
begin
	state_expected[5] = 1'bX;
end 
// expected state[ 4 ]
initial
begin
	state_expected[4] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(address_expected or address or aud_data_out_expected or aud_data_out or audio_finish_expected or audio_finish or byteenable_expected or byteenable or mem_read_expected or mem_read or read_data_request_expected or read_data_request or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address = %b | expected aud_data_out = %b | expected audio_finish = %b | expected byteenable = %b | expected mem_read = %b | expected read_data_request = %b | expected state = %b | ",address_expected_prev,aud_data_out_expected_prev,audio_finish_expected_prev,byteenable_expected_prev,mem_read_expected_prev,read_data_request_expected_prev,state_expected_prev);
	$display("| real address = %b | real aud_data_out = %b | real audio_finish = %b | real byteenable = %b | real mem_read = %b | real read_data_request = %b | real state = %b | ",address_prev,aud_data_out_prev,audio_finish_prev,byteenable_prev,mem_read_prev,read_data_request_prev,state_prev);
`endif
	if (
		( address_expected_prev[0] !== 1'bx ) && ( address_prev[0] !== address_expected_prev[0] )
		&& ((address_expected_prev[0] !== last_address_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[0] = address_expected_prev[0];
	end
	if (
		( address_expected_prev[1] !== 1'bx ) && ( address_prev[1] !== address_expected_prev[1] )
		&& ((address_expected_prev[1] !== last_address_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[1] = address_expected_prev[1];
	end
	if (
		( address_expected_prev[2] !== 1'bx ) && ( address_prev[2] !== address_expected_prev[2] )
		&& ((address_expected_prev[2] !== last_address_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[2] = address_expected_prev[2];
	end
	if (
		( address_expected_prev[3] !== 1'bx ) && ( address_prev[3] !== address_expected_prev[3] )
		&& ((address_expected_prev[3] !== last_address_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[3] = address_expected_prev[3];
	end
	if (
		( address_expected_prev[4] !== 1'bx ) && ( address_prev[4] !== address_expected_prev[4] )
		&& ((address_expected_prev[4] !== last_address_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[4] = address_expected_prev[4];
	end
	if (
		( address_expected_prev[5] !== 1'bx ) && ( address_prev[5] !== address_expected_prev[5] )
		&& ((address_expected_prev[5] !== last_address_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[5] = address_expected_prev[5];
	end
	if (
		( address_expected_prev[6] !== 1'bx ) && ( address_prev[6] !== address_expected_prev[6] )
		&& ((address_expected_prev[6] !== last_address_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[6] = address_expected_prev[6];
	end
	if (
		( address_expected_prev[7] !== 1'bx ) && ( address_prev[7] !== address_expected_prev[7] )
		&& ((address_expected_prev[7] !== last_address_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[7] = address_expected_prev[7];
	end
	if (
		( address_expected_prev[8] !== 1'bx ) && ( address_prev[8] !== address_expected_prev[8] )
		&& ((address_expected_prev[8] !== last_address_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[8] = address_expected_prev[8];
	end
	if (
		( address_expected_prev[9] !== 1'bx ) && ( address_prev[9] !== address_expected_prev[9] )
		&& ((address_expected_prev[9] !== last_address_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[9] = address_expected_prev[9];
	end
	if (
		( address_expected_prev[10] !== 1'bx ) && ( address_prev[10] !== address_expected_prev[10] )
		&& ((address_expected_prev[10] !== last_address_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[10] = address_expected_prev[10];
	end
	if (
		( address_expected_prev[11] !== 1'bx ) && ( address_prev[11] !== address_expected_prev[11] )
		&& ((address_expected_prev[11] !== last_address_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[11] = address_expected_prev[11];
	end
	if (
		( address_expected_prev[12] !== 1'bx ) && ( address_prev[12] !== address_expected_prev[12] )
		&& ((address_expected_prev[12] !== last_address_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[12] = address_expected_prev[12];
	end
	if (
		( address_expected_prev[13] !== 1'bx ) && ( address_prev[13] !== address_expected_prev[13] )
		&& ((address_expected_prev[13] !== last_address_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[13] = address_expected_prev[13];
	end
	if (
		( address_expected_prev[14] !== 1'bx ) && ( address_prev[14] !== address_expected_prev[14] )
		&& ((address_expected_prev[14] !== last_address_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[14] = address_expected_prev[14];
	end
	if (
		( address_expected_prev[15] !== 1'bx ) && ( address_prev[15] !== address_expected_prev[15] )
		&& ((address_expected_prev[15] !== last_address_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[15] = address_expected_prev[15];
	end
	if (
		( address_expected_prev[16] !== 1'bx ) && ( address_prev[16] !== address_expected_prev[16] )
		&& ((address_expected_prev[16] !== last_address_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[16] = address_expected_prev[16];
	end
	if (
		( address_expected_prev[17] !== 1'bx ) && ( address_prev[17] !== address_expected_prev[17] )
		&& ((address_expected_prev[17] !== last_address_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[17] = address_expected_prev[17];
	end
	if (
		( address_expected_prev[18] !== 1'bx ) && ( address_prev[18] !== address_expected_prev[18] )
		&& ((address_expected_prev[18] !== last_address_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[18] = address_expected_prev[18];
	end
	if (
		( address_expected_prev[19] !== 1'bx ) && ( address_prev[19] !== address_expected_prev[19] )
		&& ((address_expected_prev[19] !== last_address_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[19] = address_expected_prev[19];
	end
	if (
		( address_expected_prev[20] !== 1'bx ) && ( address_prev[20] !== address_expected_prev[20] )
		&& ((address_expected_prev[20] !== last_address_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[20] = address_expected_prev[20];
	end
	if (
		( address_expected_prev[21] !== 1'bx ) && ( address_prev[21] !== address_expected_prev[21] )
		&& ((address_expected_prev[21] !== last_address_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[21] = address_expected_prev[21];
	end
	if (
		( address_expected_prev[22] !== 1'bx ) && ( address_prev[22] !== address_expected_prev[22] )
		&& ((address_expected_prev[22] !== last_address_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address_exp[22] = address_expected_prev[22];
	end
	if (
		( aud_data_out_expected_prev[0] !== 1'bx ) && ( aud_data_out_prev[0] !== aud_data_out_expected_prev[0] )
		&& ((aud_data_out_expected_prev[0] !== last_aud_data_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[0] = aud_data_out_expected_prev[0];
	end
	if (
		( aud_data_out_expected_prev[1] !== 1'bx ) && ( aud_data_out_prev[1] !== aud_data_out_expected_prev[1] )
		&& ((aud_data_out_expected_prev[1] !== last_aud_data_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[1] = aud_data_out_expected_prev[1];
	end
	if (
		( aud_data_out_expected_prev[2] !== 1'bx ) && ( aud_data_out_prev[2] !== aud_data_out_expected_prev[2] )
		&& ((aud_data_out_expected_prev[2] !== last_aud_data_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[2] = aud_data_out_expected_prev[2];
	end
	if (
		( aud_data_out_expected_prev[3] !== 1'bx ) && ( aud_data_out_prev[3] !== aud_data_out_expected_prev[3] )
		&& ((aud_data_out_expected_prev[3] !== last_aud_data_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[3] = aud_data_out_expected_prev[3];
	end
	if (
		( aud_data_out_expected_prev[4] !== 1'bx ) && ( aud_data_out_prev[4] !== aud_data_out_expected_prev[4] )
		&& ((aud_data_out_expected_prev[4] !== last_aud_data_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[4] = aud_data_out_expected_prev[4];
	end
	if (
		( aud_data_out_expected_prev[5] !== 1'bx ) && ( aud_data_out_prev[5] !== aud_data_out_expected_prev[5] )
		&& ((aud_data_out_expected_prev[5] !== last_aud_data_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[5] = aud_data_out_expected_prev[5];
	end
	if (
		( aud_data_out_expected_prev[6] !== 1'bx ) && ( aud_data_out_prev[6] !== aud_data_out_expected_prev[6] )
		&& ((aud_data_out_expected_prev[6] !== last_aud_data_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[6] = aud_data_out_expected_prev[6];
	end
	if (
		( aud_data_out_expected_prev[7] !== 1'bx ) && ( aud_data_out_prev[7] !== aud_data_out_expected_prev[7] )
		&& ((aud_data_out_expected_prev[7] !== last_aud_data_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aud_data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aud_data_out_expected_prev);
		$display ("     Real value = %b", aud_data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aud_data_out_exp[7] = aud_data_out_expected_prev[7];
	end
	if (
		( audio_finish_expected_prev !== 1'bx ) && ( audio_finish_prev !== audio_finish_expected_prev )
		&& ((audio_finish_expected_prev !== last_audio_finish_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port audio_finish :: @time = %t",  $realtime);
		$display ("     Expected value = %b", audio_finish_expected_prev);
		$display ("     Real value = %b", audio_finish_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_audio_finish_exp = audio_finish_expected_prev;
	end
	if (
		( byteenable_expected_prev[0] !== 1'bx ) && ( byteenable_prev[0] !== byteenable_expected_prev[0] )
		&& ((byteenable_expected_prev[0] !== last_byteenable_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[0] = byteenable_expected_prev[0];
	end
	if (
		( byteenable_expected_prev[1] !== 1'bx ) && ( byteenable_prev[1] !== byteenable_expected_prev[1] )
		&& ((byteenable_expected_prev[1] !== last_byteenable_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[1] = byteenable_expected_prev[1];
	end
	if (
		( byteenable_expected_prev[2] !== 1'bx ) && ( byteenable_prev[2] !== byteenable_expected_prev[2] )
		&& ((byteenable_expected_prev[2] !== last_byteenable_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[2] = byteenable_expected_prev[2];
	end
	if (
		( byteenable_expected_prev[3] !== 1'bx ) && ( byteenable_prev[3] !== byteenable_expected_prev[3] )
		&& ((byteenable_expected_prev[3] !== last_byteenable_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port byteenable[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", byteenable_expected_prev);
		$display ("     Real value = %b", byteenable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_byteenable_exp[3] = byteenable_expected_prev[3];
	end
	if (
		( mem_read_expected_prev !== 1'bx ) && ( mem_read_prev !== mem_read_expected_prev )
		&& ((mem_read_expected_prev !== last_mem_read_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mem_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mem_read_expected_prev);
		$display ("     Real value = %b", mem_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mem_read_exp = mem_read_expected_prev;
	end
	if (
		( read_data_request_expected_prev !== 1'bx ) && ( read_data_request_prev !== read_data_request_expected_prev )
		&& ((read_data_request_expected_prev !== last_read_data_request_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port read_data_request :: @time = %t",  $realtime);
		$display ("     Expected value = %b", read_data_request_expected_prev);
		$display ("     Real value = %b", read_data_request_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_read_data_request_exp = read_data_request_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( state_expected_prev[4] !== 1'bx ) && ( state_prev[4] !== state_expected_prev[4] )
		&& ((state_expected_prev[4] !== last_state_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[4] = state_expected_prev[4];
	end
	if (
		( state_expected_prev[5] !== 1'bx ) && ( state_prev[5] !== state_expected_prev[5] )
		&& ((state_expected_prev[5] !== last_state_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[5] = state_expected_prev[5];
	end
	if (
		( state_expected_prev[6] !== 1'bx ) && ( state_prev[6] !== state_expected_prev[6] )
		&& ((state_expected_prev[6] !== last_state_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_state_exp[6] = state_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ipod_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg addr_reset;
reg aud_clk_22khz;
reg clock;
reg direction;
reg pause;
reg [31:0] read_data;
reg reset;
reg start_read;
reg timer_finish;
// wires                                               
wire [22:0] address;
wire [7:0] aud_data_out;
wire audio_finish;
wire [3:0] byteenable;
wire mem_read;
wire read_data_request;
wire [6:0] state;

wire sampler;                             

// assign statements (if any)                          
ipod_fsm i1 (
// port map - connection between master ports and signals/registers   
	.addr_reset(addr_reset),
	.address(address),
	.aud_clk_22khz(aud_clk_22khz),
	.aud_data_out(aud_data_out),
	.audio_finish(audio_finish),
	.byteenable(byteenable),
	.clock(clock),
	.direction(direction),
	.mem_read(mem_read),
	.pause(pause),
	.read_data(read_data),
	.read_data_request(read_data_request),
	.reset(reset),
	.start_read(start_read),
	.state(state),
	.timer_finish(timer_finish)
);

// addr_reset
initial
begin
	addr_reset = 1'b0;
	addr_reset = #260000 1'b1;
	addr_reset = #60000 1'b0;
end 

// aud_clk_22khz
always
begin
	aud_clk_22khz = 1'b0;
	aud_clk_22khz = #50000 1'b1;
	#50000;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// direction
initial
begin
	direction = 1'b0;
	direction = #450000 1'b1;
	direction = #40000 1'b0;
end 

// pause
initial
begin
	pause = 1'b0;
	pause = #650000 1'b1;
	pause = #150000 1'b0;
end 
// read_data[ 31 ]
initial
begin
	read_data[31] = 1'b0;
end 
// read_data[ 30 ]
initial
begin
	read_data[30] = 1'b0;
end 
// read_data[ 29 ]
initial
begin
	read_data[29] = 1'b0;
end 
// read_data[ 28 ]
initial
begin
	read_data[28] = 1'b0;
end 
// read_data[ 27 ]
initial
begin
	read_data[27] = 1'b0;
end 
// read_data[ 26 ]
initial
begin
	read_data[26] = 1'b0;
end 
// read_data[ 25 ]
initial
begin
	read_data[25] = 1'b0;
end 
// read_data[ 24 ]
initial
begin
	read_data[24] = 1'b0;
end 
// read_data[ 23 ]
initial
begin
	read_data[23] = 1'b0;
end 
// read_data[ 22 ]
initial
begin
	read_data[22] = 1'b0;
end 
// read_data[ 21 ]
initial
begin
	read_data[21] = 1'b0;
end 
// read_data[ 20 ]
initial
begin
	read_data[20] = 1'b0;
end 
// read_data[ 19 ]
initial
begin
	read_data[19] = 1'b0;
end 
// read_data[ 18 ]
initial
begin
	read_data[18] = 1'b0;
end 
// read_data[ 17 ]
initial
begin
	read_data[17] = 1'b0;
end 
// read_data[ 16 ]
initial
begin
	read_data[16] = 1'b0;
end 
// read_data[ 15 ]
initial
begin
	read_data[15] = 1'b0;
end 
// read_data[ 14 ]
initial
begin
	read_data[14] = 1'b0;
end 
// read_data[ 13 ]
initial
begin
	read_data[13] = 1'b0;
end 
// read_data[ 12 ]
initial
begin
	read_data[12] = 1'b0;
end 
// read_data[ 11 ]
initial
begin
	read_data[11] = 1'b0;
end 
// read_data[ 10 ]
initial
begin
	read_data[10] = 1'b0;
end 
// read_data[ 9 ]
initial
begin
	read_data[9] = 1'b0;
end 
// read_data[ 8 ]
initial
begin
	read_data[8] = 1'b0;
end 
// read_data[ 7 ]
initial
begin
	read_data[7] = 1'b0;
end 
// read_data[ 6 ]
initial
begin
	read_data[6] = 1'b0;
end 
// read_data[ 5 ]
initial
begin
	read_data[5] = 1'b0;
end 
// read_data[ 4 ]
initial
begin
	read_data[4] = 1'b0;
end 
// read_data[ 3 ]
initial
begin
	read_data[3] = 1'b0;
end 
// read_data[ 2 ]
initial
begin
	read_data[2] = 1'b0;
end 
// read_data[ 1 ]
initial
begin
	read_data[1] = 1'b0;
end 
// read_data[ 0 ]
initial
begin
	read_data[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// start_read
initial
begin
	start_read = 1'b0;
	start_read = #100000 1'b1;
	start_read = #200000 1'b0;
	start_read = #100000 1'b1;
	start_read = #100000 1'b0;
	start_read = #300000 1'b1;
end 

// timer_finish
initial
begin
	timer_finish = 1'b1;
	timer_finish = #200000 1'b0;
	timer_finish = #100000 1'b1;
	timer_finish = #400000 1'b0;
	timer_finish = #100000 1'b1;
end 

ipod_fsm_vlg_sample_tst tb_sample (
	.addr_reset(addr_reset),
	.aud_clk_22khz(aud_clk_22khz),
	.clock(clock),
	.direction(direction),
	.pause(pause),
	.read_data(read_data),
	.reset(reset),
	.start_read(start_read),
	.timer_finish(timer_finish),
	.sampler_tx(sampler)
);

ipod_fsm_vlg_check_tst tb_out(
	.address(address),
	.aud_data_out(aud_data_out),
	.audio_finish(audio_finish),
	.byteenable(byteenable),
	.mem_read(mem_read),
	.read_data_request(read_data_request),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

